<script id="pending-publish-indicator" type="text/javascript">
    PublicationChecker = new Backbone.Marionette.Application();
    PublicationChecker.AppManager = (function(Backbone){
        PendingView = Marionette.ItemView.extend({
            initialize : function() {
                this.model.on("sync", this.render );
            }
        });
        PendingBadgeView = PendingView.extend({
            template : "#pending-badge-template"
        });
        PendingLabelView = PendingView.extend({
            template : "#pending-label-template"
        });
        OverviewLabelView = Marionette.ItemView.extend({
            template : "#overview-label-template"
        });

        PendingCount = Backbone.Model.extend({
            url : "<%= baseUri + '/publisher/pending_count.json' %>"
        });

        var pendingBadgeRegion = new Backbone.Marionette.Region({
            el: "#nav-pub-count-area"
        });
        var pendingLabelRegion = new Backbone.Marionette.Region({
            el: "#nav-pub-count-label-area"
        });
        var overviewLabelRegion = new Backbone.Marionette.Region({
            el: "#overview-publish-changes-nav-item"
        });

        var pendingPoller = null;

        return {
            init : function(interval_secs) {
                var interval = interval_secs;
                // If supplied interval is not an integer or is less than 60 seconds, set it to 60 seconds
                if (interval < 60 || !Number.isInteger(interval)) {
                  inverval = 60;
                };

                pending = new PendingCount();

                pending.fetch({
                    success : function(mdl) {
                        if (pendingPoller) {
                            pendingPoller.stop();
                        };

                        pendingBadge = new PendingBadgeView({
                            model : mdl
                        });
                        pendingLabel = new PendingLabelView({
                            model : mdl
                        });
                        overviewLabel = new OverviewLabelView({
                            model : mdl
                        });

                        pendingBadgeRegion.show(pendingBadge);
                        pendingLabelRegion.show(pendingLabel);
                        overviewLabelRegion.show(overviewLabel);

                        pendingPoller = Backbone.Poller.get(mdl, {
                           delay : interval * 1000,
                           delayed : true
                        });

                        if (pendingPoller) {
                            pendingPoller.start();
                        };
                    }
                });
            }
        }
    })(Backbone);

  
    $(document).ready(function() {
        PublicationChecker.AppManager.init(<%= ENV["PUBLISH_CHECKER_INTERVAL"].present? && ENV["PUBLISH_CHECKER_INTERVAL"].to_i > 60 ? ENV["PUBLISH_CHECKER_INTERVAL"].to_i : 60 %>); // If no env varible set, default to 60 second interval
    });
</script>

<script type="text/template" id="pending-badge-template">
    <span class="badge"><i class="fa fa-refresh" aria-hidden="true"></i>&nbsp;{{=count }}</span>
</script>

<script type="text/template" id="pending-label-template">
    <span class="label label-warning publication-count-label"><i class="publication-count-num">{{= count }}</i>&nbsp;&nbsp;<%= t("pending-updates") %></span>
</script>

<script type="text/template" id="overview-label-template">
    <a class="pending-changes-count-badge" href="<%= baseUri %>/pages/publications_dash/online#program_publish_review"><span class="label label-warning publication-count-label"><i class="publication-count-num">{{= count }}</i>&nbsp;&nbsp;<%= t("pending-updates") %></span></a>
</script>


