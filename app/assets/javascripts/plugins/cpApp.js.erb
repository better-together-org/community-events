/*
 * 
 */

var AppUtils = (function(){
    var eventAggregator = new Backbone.Wreqr.EventAggregator(); // Event aggregator - global

    var translations = {
        en: {
                remove_exclusion_confirmation : '<%= (I18n.t "remove-exclusion-confirmation", :locale => :en).gsub(/'/, "\\\'").html_safe %>',
                remove_exclusion : '<%= (I18n.t "remove-exclusion", :locale => :en).gsub(/'/, "\\\'").html_safe %>',
                delete_confirmation : '<%= (I18n.t "delete-confirmation", :locale => :en).gsub(/'/, "\\\'").html_safe %>',
                confirm_that_you_really_want_to_delete : '<%= (I18n.t "confirm-that-you-really-want-to-delete", :locale => :en).gsub(/'/, "\\\'").html_safe %>'
            },
        fr : {
                remove_exclusion_confirmation : '<%= (I18n.t "remove-exclusion-confirmation", :locale => :fr).gsub(/'/, "\\\'").html_safe %>',
                remove_exclusion : '<%= (I18n.t "remove-exclusion", :locale => :fr).gsub(/'/, "\\\'").html_safe %>',
                delete_confirmation : '<%= (I18n.t "delete-confirmation", :locale => :fr).gsub(/'/, "\\\'").html_safe %>',
                confirm_that_you_really_want_to_delete : '<%= (I18n.t "confirm-that-you-really-want-to-delete", :locale => :fr).gsub(/'/, "\\\'").html_safe %>'
            }
    };

    function translate(str) {
        // use moment.locale
        return translations[moment.locale()][str] ? translations[moment.locale()][str] : str;
    };

    /*
     *
     * 
     */
    
    const DEFAULT_MSG_OPTIONS = {
          text : '', // the text to display in the message view
          fade : false, // whether or not the message fades out after a certain duration
          style : 'info', // the color style for the message background
          fadeTimeout : 3000, // duration before the modal fades out if fade is set to true
          fadeInDuration : 500, // the time it takes the message to fade into view
          fadeOutDuration : 100, // the time it takes for the message to fade out of view
          textAlign : 'left', // the text alignment for the message contents
          buttonIconClass : 'fa fa-remove', // the icon class for the message close button
          buttonActionFn : null, // if set, a method that will be called when the user clicks on the close button
          errorObject : null, // assign the result of 'form.validate()' to this option and this method will loop 
          // through the object's properties and append its messages to the message text
          renderLocation : 'modal', // the location to render the message. Set this to 'main-layout' to render the message in the main application layout #alert-area contianer
          msgContainerSelector : '.modal-msg-container', // the selector for the desired message container. Override this option to render the message in an alternative container
          isIndicator : false, // Determines if the message should be rendered in the bottom msg area or not
          indicatorMessage : null,
          indicatorBtnIconClass : 'fa fa-arrow-up',
          indicatorBtnActionFn : function(e) {
            // On message button click, fade out the message and scroll the modal up to the top
            var self = this;

            self.$el.fadeTo(self.options.fadeOutDuration, 0).slideUp(self.options.fadeOutDuration, function(){
              self.$el.parents('.modal-msg-container').removeClass('active');
              self.remove();
            });

            $('.modal').animate({ scrollTop: 0 }, 'fast');
          },
    };

    // Create view to be used to render the  message
    var MsgView = Marionette.ItemView.extend({
        template : "#modal-msg-template",
        className : "modal-msg",
        initialize : function(options) {
          this.options = $.extend({}, this.options, DEFAULT_MSG_OPTIONS, options); // Set set view with default and supplied options

          if (this.options.renderLocation == 'modal') {
            // Set msg containers to their defaults for a modal
            this.msgContainer = $("#top-msg.modal-msg-container");
            this.indicatorContainer = $("#bottom-msg.modal-msg-container");
          } else {
            // Set message container based on provided selector
            this.msgContainer = $(this.options.msgContainerSelector);

            if (this.options.isIndicator) {
              // Allow msg to be rendered as an indicator outside of a modal context
              this.indicatorContainer = $(this.options.msgContainerSelector);
            };
          };
        },
        events : {
          "click button" : function(e) {
            var self = this;
            
            if (self.options && self.options.buttonActionFn) {
              // If method called with a function for the message button, call it
              self.options.buttonActionFn.call(self, e);
            } else {
              // By default, fade out the message on button click
              self.$el.fadeTo(self.options.fadeOutDuration, 0).slideUp(self.options.fadeOutDuration, function(){
                self.msgContainer.removeClass("active");
                self.remove();
              });
            };
          }
        },
        onRender : function(){
          var self = this;

          // Set message background
          switch (self.model.get("style")) {
            case "success": self.$el.addClass("alert-success");
            break;
            case "info": self.$el.addClass("alert-info");
            break;
            case "notice": self.$el.addClass("alert-info");
            break;
            case "warning": self.$el.addClass("alert-warning");
            break;
            case "danger": self.$el.addClass("alert-danger");
            break;
            case "error": self.$el.addClass("alert-danger");
            break;
            default: self.$el.addClass("alert-info");
          };

          // Set text alignment
          switch (self.model.get("textAlign")) {
            case "left": self.$el.css('text-align', 'left');
            break;
            case "right": self.$el.css('text-align', 'right');
            break;
            case "center": self.$el.css('text-align', 'center');
            break;
            default: self.$el.css('text-align', 'left');
          };

          var self = this;

          // If fade is set to true, fade out the message during the given timeframe
          if (!(typeof self.model.get("fade") == "undefined") && self.model.get("fade")){
            setTimeout(function() {
              self.$el.fadeTo(self.options.fadeOutDuration, 0).slideUp(self.options.fadeOutDuration, function(){
                self.msgContainer.removeClass("active");
                self.remove();
              });
            }, self.options.fadeTimeout);
          };

          if (self.options.isIndicator) {
            // Set container as active and append indicator message view to indicator container
            self.$el.addClass('indicatorMsg');
            self.indicatorContainer.addClass("active").append(self.$el);
          } else {
            // Set container as active and append message view to container
            self.msgContainer.addClass("active").append(self.$el);
          };

          // Fade in message view
          self.$el.fadeTo(self.options.fadeInDuration, 1).slideDown(self.options.fadeInDuration);
        }
    });

    // This function can be called to render a message in a bootstrap modal between the header and body seactions
    function setMessage(options) {
        var msgOptions = _.clone(DEFAULT_MSG_OPTIONS);

        // Allow method to be called with only the message supplied. Uses all default values.
        if (typeof options == "string") {
          msgOptions.text = options;
        } else if (typeof options == "object") {
          msgOptions = $.extend({}, msgOptions, options);
        };

        // If error object is present and message style is default, set message style to 'error'
        if (msgOptions.errorObject && typeof msgOptions.errorObject == "object" && msgOptions.style == 'info') {
          msgOptions.style = 'error';
        };

        // If method called with contianer selector, 
        // set renderLocation value to "other" so it doesn't behave as if it were in a modal
        if (msgOptions.msgContainerSelector != '.modal-msg-container') {
          msgOptions.renderLocation = 'other';
        };

        // If method called with 'main-layout' as renderLocation option, set selector to main layout alert area
        if (msgOptions.renderLocation == 'main-layout') {
          msgOptions.msgContainerSelector = '#alert-area';
        };

        function renderMsg(renderOptions) {
          // Method to render the message to whichever container has been specified
          var msgRenderOptions = _.clone(renderOptions);

          // Create message object with attributes from method msgRenderOptions
          var Message = new Backbone.Model();
          Message.set(msgRenderOptions);

          if (msgRenderOptions.errorObject && typeof msgRenderOptions.errorObject == "object") {
            // If errorObject present, append error messages to message text
            var message = msgRenderOptions.text;
            var errors = msgRenderOptions.errorObject;
            for (var property in errors) {
                if (errors.hasOwnProperty(property)) {
                    if (Object.keys(errors).length > 1)
                      message += errors[property].message + '<br>';
                    else {
                      message += errors[property].message;
                    };
                };
            };

            Message.set('text', message);
          };

          msgRenderOptions = $.extend({}, msgRenderOptions, {
              model : Message
          });
          // Instantiate and render message view
          var view = new MsgView(msgRenderOptions);
          view.render();

          var $modal = $('.modal-dialog');

          if (msgRenderOptions.renderLocation == 'modal' && $modal.length > 0 && $modal.offset().top < 0) {
            // If modal has been scrolled so its top edge falls outside the viewport, 
            // then render the message indicator at the bottom
            function indicatorText() {
              var msg = ""
              // If this is an error message, set the message to the error type else use the default general message
              if (msgRenderOptions.indicatorMessage != null && typeof(msgRenderOptions.indicatorMessage) == 'string') {
                msg = msgRenderOptions.indicatorMessage;
              } else if (msgRenderOptions.errorObject && typeof msgRenderOptions.errorObject == "object") {
                msg = I18n.t('core.messages.modal-indicator-msg-error');
              } else {
                msg = I18n.t('core.messages.modal-indicator-msg-general');
              };

              return msg;
            };

            // Create indicator message model and view
            var indicatorMsgAttrs = {
              text : indicatorText(),
              textAlign : 'right',
              buttonIconClass : msgRenderOptions.indicatorBtnIconClass
            };

            indicatorMsg = Message.clone().set(indicatorMsgAttrs);

            var indicatorOptions = $.extend({}, msgRenderOptions, indicatorMsgAttrs, {
                isIndicator : true,
                model : indicatorMsg,
                buttonActionFn : msgRenderOptions.indicatorBtnActionFn
            });

            var indicatorView = new MsgView(indicatorOptions);

            // Render and append indicator view to the indicator container, then fade it in
            indicatorView.render();
          };
        };

        var $msgContainer = $(msgOptions.msgContainerSelector);

        if ($msgContainer.length > 0) {
          // If message container is present in the DOM, render the message
          renderMsg(msgOptions);
        } else if (msgOptions.renderLocation == 'modal') {
          // If message container is not found in the modal DOM, create and add the contianer elements to the modal
          $modalBody = $(".modal-body");
          $msgContainer = $('<div id="top-msg" class="modal-msg-container"></div>');
          $modalBody.before($msgContainer);
          $indicatorContainer = $msgContainer.clone().attr('id', 'bottom-msg');
          $modalBody.after($indicatorContainer);
          renderMsg(msgOptions);
        };
    };

   /*
    * 
    */
    InfoModal = Backbone.View.extend({
        tagName: "div",
        className: "modal bs-modal-lg",
        events: {
            "submit"            : "submit",
            "click .close-modal": "hide",
            "hidden.bs.modal"   : "hide",
            "keypress"          : "swallow"
        },
        
        initialize : function(options) {
            this.options = options || {};
            this.template = _.template($('#modal-info-template').html());
        },

        modalOptions: {
            backdrop: 'static',
        },

        render: function () {
            Backbone.BootstrapModal.count++;

            this.$el.html($(this.template({
                title : this.options.title
            })));

            this.$el.modal(this.modalOptions);

            if (this.options.content) {
                this.$el.find(".modal-body").append(this.options.content);
                this.$el.find('.bpopover').popover({html : true});
            };
            
            this.delegateEvents();
            
            return this;
        },
        
        swallow : function(e) {
            e.stopPropagation();
        },
        
        submit : function(e) {
            if (e && e.type == "submit") {
                e.preventDefault();
                e.stopPropagation();
                if (this.options.continueAction) {
                    this.options.continueAction();
                }
                this.options.closeAction = null;
                this.$el.modal("hide");
                this.remove();
            } else {
                this.remove();
            };
        },
        
        hide : function(e) {
            if (this.options.closeAction) {
                this.options.closeAction(e);
            };
            this.unbind();
            this.views = [];  
            this.remove();
        }
    });
    
    /*
     * 
     */
    ConfirmModel = InfoModal.extend({
        initialize : function(options) {
            this.options = options || {};
            this.template = _.template($('#modal-confirm-template').html());
        }
    });
    
    /*
     * 
     */
    LeavePageModal = Backbone.View.extend({
        tagName: "div",
        className: "modal bs-modal-lg fade",
        events: {
            "submit": "submit",
            //"hidden": "hide",
            "click .close-modal": "hide",
            "click .abandon" : "abandon"
        },
        
        initialize : function(options) {
            this.options = options || {};
            this.template = _.template($('#modal-leave-template').html());
        },

        modalOptions: {
            backdrop: false,
        },
        
        abandon : function() {
            if (this.options.abandonAction) {
                this.options.abandonAction();
            }
        },

        render: function () {
            this.$el.html($(this.template({
                title : this.options.title,
                confirm_message : this.options.confirm_message
            })));

            this.delegateEvents();
            
            this.$el.modal(this.modalOptions);

            return this;
        },
        
        submit : function(e) {
            if (e && e.type == "submit") {
                e.preventDefault();
                e.stopPropagation();
                this.$el.modal("hide");
                this.options.continueAction();
            };
            this.remove();
        },
        
        hide: function (e) {
            this.remove();
            this.unbind();
            this.views = [];  
        },
    });
        
    /*
     * 
     */
    PanelModal = InfoModal.extend({
        events: {
            "submit"            : "submit",
            "keypress"          : "swallow",
            "hide.bs.modal"     : "hideCheck",
            "hidden.bs.modal"   : "hide"
        },
        
        hide: function (e) {
            if (this.options.closeAction) {
                this.options.closeAction(e);
            };
            
            iframes = this.$el.children('iframe'); //find(".modal-body").append(this.options.content);
            for (var i = 0; i < iframes.length; i++) {
                iframes[i].parentNode.removeChild(iframes[i]);
            };
            
            this.unbind();
            this.views = [];  
            this.remove();
        },
        
        hideCheck : function(e) {
            // Check that we are allowed to close the dialog and if so continue with the close
            closeCheck = this.options.closeCheck;
            if (closeCheck && !this.checked) {
                var changed = closeCheck();
                var panel = this;
                
                if (changed) {
                    e.preventDefault();
                    e.stopPropagation();

                    mdl = new LeavePageModal({
                        title : this.options.title,
                        continueAction : function() {
                            panel.checked = true;
                            panel.$el.modal("hide");
                            panel.remove();
                        }
                    });
                    mdl.render();
                }
            };
        },
        
        initialize : function(options) {
            this.options = options || {};
            this.template = _.template($('#modal-panel-template').html());
        },
        
        render: function () {
            var url = this.options.url;
            Backbone.BootstrapModal.count++;
            
            this.checked = false;

            this.$el.html($(this.template({
                url : url,
                title : this.options.title
            })));
            
            this.$el.modal(this.modalOptions);

            if (this.options.content) {
                this.$el.find(".modal-body").append(this.options.content);
                this.$el.find('.bpopover').popover({html : true});
            }
            
            this.delegateEvents();
            
            return this;
        }
    });

    /*
     * 
     */
    PlainPanelModal = InfoModal.extend({
        events: {
            "submit"            : "submit",
            "keypress"          : "swallow",
            "hide.bs.modal"     : "hideCheck",
            "hidden.bs.modal"   : "hide"
        },
        
        hide: function (e) {
            if (this.options.closeAction) {
                this.options.closeAction(e);
            };
            
            this.unbind();
            this.views = [];  
            this.remove();
        },
        
        hideCheck : function(e) {
            // Check that we are allowed to close the dialog and if so continue with the close
            closeCheck = this.options.closeCheck;
            if (closeCheck && !this.checked) {
                var changed = closeCheck();
                var panel = this;
                
                if (changed) {
                    e.preventDefault();
                    e.stopPropagation();

                    mdl = new LeavePageModal({
                        title : this.options.title,
                        continueAction : function() {
                            panel.checked = true;
                            panel.$el.modal("hide");
                            panel.remove();
                        }
                    });
                    mdl.render();
                }
            };
        },
        
        initialize : function(options) {
            this.options = options || {};
            this.template = _.template($('#modal-plain-panel-template').html());
        },
        
        render: function (after_render) {
            var url = this.options.url;
            var that = this;
            Backbone.BootstrapModal.count++;
            
            this.checked = false;

            $.ajax({
                url : url,
                success : function(data) {
                    that.$el.html($(that.template({
                        content : data,
                        title : that.options.title
                    })));
                    if (after_render) {
                        after_render();
                    };
                }
            });
            
            this.$el.modal(this.modalOptions);

            if (this.options.content) {
                this.$el.find(".modal-body").append(this.options.content);
                this.$el.find('.bpopover').popover({html : true});
            }
            
            this.delegateEvents();
            
            return this;
        }
    });

    /*
     * 
     */
    GenericModal = Backbone.View.extend({
        tagName: "div",
        className: "modal bs-modal-lg",
        events: {
            "submit": "submit",
            "hidden": "close",
            "click .close-modal": "close_modal",
            "keypress" : "swallow"
        },
        setMsg : setMessage,
        
        swallow : function(e) {
            e.stopPropagation();
        },
        
        initialize : function(options) {
            this.options = options || {};
            this.template = _.template($(options.modalTemplate || '#modal-edit-template').html());
        },

        modalOptions: {
            backdrop: 'static',
            keyboard : false
        },

        render: function () {
            var numModals = Backbone.BootstrapModal.count++;

            this.$el.html($(this.template({
                title : this.options.title
            })));

            this.$el.modal(this.modalOptions);

            this.renderBody();
            this.$el.find(".modal-body").append(this.form.el);
            this.$el.find('.bpopover').popover({html : true});
            
            this.delegateEvents();

            <!-- Force the focus to change to this dialog -->
            var e = jQuery.Event("keydown");
            e.which = 27; // # Some key code value
            $(document.activeElement).trigger(e);
            
            this.$el.find("input").filter(':visible:first').focus();

            $('body').addClass('showing-modal');
            
            return this;
        },
        
        submit : function(e) {
            if (e && e.type == "submit") {
                e.preventDefault();
                e.stopPropagation();
            };
            
            var errors = this.submitData();
            
            if (! errors ) {
                if (e.type != "hide") this.$el.modal("hide");
                this.remove();
                $('body').removeClass('showing-modal');
            };
        },
        
        removeCK : function() {
            this.form.$el.find('.cke').each(function() {
                try {
                    if(CKEDITOR.instances[$(this)[0].id] != null) {
                        CKEDITOR.instances[$(this)[0].id].destroy(true);
                    }
                } catch(e){
                    console.error(e);
                }
            });
        },
        
        close_modal: function (e) {
            this.removeCK();
            this.remove();
            this.unbind();
            this.views = [];
            Backbone.BootstrapModal.count--;
            $('body').removeClass('showing-modal');
        },
        
        // over-ride this for the body of the form        
        renderBody : function() {
        },

        // over-ride for the actual data submission        
        submitData : function() {
        }
        
    });
    
    /*
     * 
     */
    FormModal = GenericModal.extend({
        renderBody : function() {
            this.form = this.options.form;
            this.form.setMsg = setMessage;
            
            if (this.options.modal_template) {
                this.form.template = _.template($(this.options.modal_template).html());
            };
            
            this.form.render();
        },
        
        // over-ride for the actual data submission        
        submitData : function() {
            $('.modal-msg-container').removeClass('active').html('');
            // gather the data and update the underlying model etc.
            var errors = this.options.form.validate();
            
            if (!errors) { // save if there are no errors
                var refreshFn = this.options.refresh;
                var refreshEvent = this.options.view_refresh_event;
                var data = this.form.getValue();
                var endPoint = this.options.endPoint;

                var $body = $("body");
                // show please wait  
                $body.addClass("loading");
                $.ajax({
                    url : endPoint,
                    type : 'POST',
                    data : data,
                    success : function(data) {
                        if (refreshEvent) {
                            eventAggregator.trigger(refreshEvent); 
                        };
                        if (refreshFn) {
                            refreshFn(data); // cause problem with templates used ???
                        };
                    }
                }).done(function(d) {
                    // remove please wait
                    $body.removeClass("loading");
                });
            } else {
              this.setMsg({
                errorObject : errors,
                fade : true,
                fadeTimeout : 10000
              });
            };
            
            return errors; // if there are any errors
        }
    });
    
    /*
     * 
     */
    ModelModal = GenericModal.extend({
        renderBody : function() {
            this.form = new Backbone.Form({
                model: this.model
            });
            this.form.setMsg = setMessage;
            
            if (this.options.modal_template) {
                this.form.template = _.template($(this.options.modal_template).html());
            };
            
            this.form.render();
        },

        // over-ride for the actual data submission        
        submitData : function(callback) {
            $('.modal-msg-container').removeClass('active').html('');
            var self = this;
            // gather the data and update the underlying model etc.
            var errors = this.form.commit({ validate: true }); // To save the values from the form back into the model
            
            if (!errors) { // save if there are no errors
                var refreshFn = this.options.refresh;
                var refreshEvent = this.options.view_refresh_event;
            
                // accept-charset="UTF-8"
                this.model.save(null, { 
                    success : function(mdl) {
                        // Refresh the view if there is a refresh method
                        if (refreshEvent) {
                            eventAggregator.trigger(refreshEvent); 
                        }
                        if (refreshFn) {
                            refreshFn(mdl); // cause problem with templates used ???
                        };
                        if (callback) {
                            callback();
                        };

                        self.setMsg({
                          text : I18n.t('core.messages.data-successfully-saved'),
                          style : 'success',
                          renderLocation : 'main-layout',
                          fade : true,
                          fadeTimeout : 10000
                        });
                    }
                }); // save the model to the server
            } else {
              this.setMsg({
                errorObject : errors,
                fade : true,
                fadeTimeout : 10000
              });
            };
            
            return errors; // if there are any errors
        }

    });

    /*
     * 
     */
    FileModelModal = ModelModal.extend({
        submit : function(e) {
            if (e && e.type == "submit") {
                e.preventDefault();
                e.stopPropagation();
            };

            this.$el.find('.progress_bar').css('width', '0%');
            this.model.on("progress", this.progress, this);
            
            var that = this;
            this.submitData(function() {
                that.$el.modal("hide");
                that.remove();
                $('body').removeClass('showing-modal');
            });
        },

        progress : function(e, ctx) {
            var percent = Math.round(e * 100.0);
            this.$el.find('.progress-bar').css('width', percent + '%');
        }
    });
    
    /*
     * 
     */
    ItemEditView = Marionette.ItemView.extend({
        events : {
            "click .model-edit-button"   : "editModel", // flip to an edit view ...
            "click .model-cancel-button" : "cancelEdit", // flip to an edit view ...
            "click .model-submit-button" : "submit"
        },
        
        formEvents : {
        },

        setMsg : setMessage,
        
        editModel : function(e) {
            e.preventDefault();
            e.stopPropagation();
            // flip to the edit view
            this.renderForm();
        },
        
        cancelEdit : function(e) {
            e.preventDefault();
            e.stopPropagation();
            // flip back to the read view
            this.renderModel();
            if (this.options.resetFn) {
                this.options.resetFn(this);
            }
        },
        
        submit  : function(e) {
            e.preventDefault();
            e.stopPropagation();

            var errors = this.submitData();

            if (! errors ) {
                // flip back to the read view
                this.renderModel();
            };
        },
        
        submitData : function() {
            $('.modal-msg-container').removeClass('active').html('');
            var self = this;
            // gather the data and update the underlying model etc.
            var errors = this.form.commit(); // To save the values from the form back into the model
            
            if (!errors) { // save if there are no errors
                var refreshFn = this.options.refresh;
                var mdl = this.model;
            
                this.model.save(null, { 
                    success : function(mdl) {
                        // Refresh the view if there is a refresh method
                        if (refreshFn) {
                            refreshFn(mdl); // cause problem with templates used ???
                        };
                        self.setMsg({
                          text : I18n.t('core.messages.data-successfully-saved'),
                          style : 'success',
                          renderLocation : 'main-layout',
                          fade : true,
                          fadeTimeout : 10000
                        });
                    },
                    statusCode: {
                        400 : function(response) {
                            mdl.fetch({
                                async:false
                            });
                        }
                    }
                }); // save the model to the server
            } else {
              this.setMsg({
                errorObject : errors,
                fade : true,
                fadeTimeout : 10000
              });
            };
            
            return errors; // if there are any errors
        },
        
        initialize : function(options) {
            this.options = options || {};
            this.listenTo(this.model, 'change', this.render);
            
            this.template = _.template($('#item-edit-template').html()); //_.template(_model_html); //

            this.model.on("sync", this.options.syncCallback ); // when the modal does the update and second after the update to the server
        },
        
        render : function() {
            this.$el.html($(this.template({
                // title : this.options.title
            })));
            
            this.renderModel();
            this.$el.find('.bpopover').popover({html : true});
        },
        
        renderModel : function() {
            var disableEdit = false;
            if (this.options.editDisableCondition) {
                disableEdit = this.options.editDisableCondition(this.model);
            }
            // display : none
            this.$el.find('.model-cancel-button').addClass('hidden-button');
            this.$el.find('.model-submit-button').addClass('hidden-button');
            if (!disableEdit) {
                this.$el.find('.model-edit-button').removeClass('hidden-button');
            } else {
                this.$el.find('.model-edit-button').addClass('hidden-button');
            }
            
            if (this.options.readTemplate) {
                html = _.template($(this.options.readTemplate).html(), this.model.toJSON());
                
                this.$el.find(".model-body").html(html);
            } else {
                this.$el.find(".model-body").html("");
            };
        },
        
        renderForm : function() {
            this.$el.find('.model-cancel-button').removeClass('hidden-button');
            this.$el.find('.model-submit-button').removeClass('hidden-button');
            this.$el.find('.model-edit-button').addClass('hidden-button');
            // display : none
            this.form = new Backbone.Form({
                    model: this.model
            });
            
            if (this.options.modal_template) {
                this.form.template = _.template($(this.options.modal_template).html());
            };
            
            this.form.render();
            
            var form = this.form;
            // iterate through the form events and add to the form
            _.each(this.formEvents, function(value, key, list) {
                form.on(key, value);
            });
            
            // the render it in the area
            this.$el.find(".model-body").html(this.form.el);
            this.$el.find('.bpopover').popover({html : true});
            
            if (this.options.form_init) {
                this.options.form_init(form, this.model);
            }
        },
        
        onEvent : function(eventname, func) {
            this.formEvents[eventname] = func;
        }
    });
    
    /*
     * 
     */
    ItemView = Marionette.ItemView.extend({

        events : {
            "click .model-select-button"        : "select",
            "click .model-drill-down-button"    : "drillDown",
            "click .model-edit-button"          : "editModel",
            "click .model-delete-button"        : "deleteModel",
            "click .model-preview-button"       : "preview",
            "click .model-copy-button"          : "copy"
        },
        
        initialize : function(options) {
            this.options = options || {};
            this.listenTo(this.model, 'change', this.render);
            
            if (this.options.url) {
                this.model.urlRoot = this.options.url;
            };

            this.model.on("sync", this.options.syncCallback ); // when the modal does the update and second after the update to the server
        },

        onRender : function() {
            if (this.options.onRender) {
                this.options.onRender(this.$el, this.model);
            }
        },
        
        select : function(event) {
            if (this.options.selectFn) {
                this.$el.parent().find('tr').removeClass('info');
                this.$el.addClass('info');
                this.options.selectFn(this.model.id, this.model);
            }
            this.editModel();
        },
        
        copy : function(event) {
            if (this.options.copyFn) {
                this.options.copyFn(this.model);
            }
        },
        
        preview : function(event) {
            if (this.options.previewFn) {
                this.options.previewFn(this.model);
            }
        },
              
        drillDown : function(event) {
            if (this.options.drillDownFn) {
                this.$el.parent().find('tr').removeClass('info');
                this.$el.addClass('info');
                this.options.drillDownFn(this.model.id);
            }
        },
        
        editModel : function() {
            // If there is no template then we use a modal
            if (this.options.readTemplate) {
                var v = new ItemEditView({
                    model           : this.model,
                    readTemplate    : this.options.readTemplate,
                    editDisableCondition : this.options.editDisableCondition,
                    modal_template  : this.options.modal_template,
                    view_refresh_event : this.options.view_refresh_event
                });
                
                v.render();
                $(this.options.itemArea).html(v.$el);
            } else if (this.options.modal_edit) {
                var modal = new ModelModal({
                    model : this.model,
                    title : this.options.modal_edit_title,
                    modal_template : this.options.modal_template,
                    view_refresh_event : this.options.view_refresh_event
                });
                modal.render();
                if (this.options.form_event_fn) {
                    mdl.form.on(this.options.form_event, this.options.form_event_fn );
                }
            }
            
        },
        
        deleteModel : function() {
            var clearFn = this.options.clearFn;
            
            var thatModel = this.model;
            modal = new AppUtils.ConfirmModel({
                title : translate("delete_confirmation"),
                content : translate("confirm_that_you_really_want_to_delete"),
                continueAction : function() {
                    thatModel.destroy({
                        wait  : true,
                        success : function(mdl) {
                            if (clearFn) {
                                clearFn();
                            }
                        }
                    });
                },
                closeAction : function() {
                }
            });
            modal.render();
            
        },
    });

    /*
     * 
     */    
    CollectionView = Backbone.Marionette.CollectionView.extend({
        itemView: ItemView,

        initialize : function(options) {
            this.options = options || {};
            eventAggregator.on(this.options.view_refresh_event, this.refreshList, this);
        },
        
        refreshList : function() {
            this.collection.fetch({});
        }
    });
    
    
    /*
     * 
     */
    function renderCollection(collection, options) {
        var render_callback = options.render_callback;
        viewType = CollectionView.extend({
                        attributes          : options.collection_attributes,
                        itemViewOptions     : {
                            template        : options.template,
                            newTitle        : options.newTitle,
                            editTitle       : options.editTitle,
                            attributes      : options.view_attributes,
                            syncCallback    : options.updateCallback,
                            tagName         : typeof options.tagName != 'undefined'  ? options.tagName : 'div',
                            url             : options.modelURL,
                            selectFn        : options.selectFn,
                            clearFn         : options.clearFn,
                            copyFn          : options.copyFn,
                            previewFn       : options.previewFn,
                            drillDownFn     : options.drillDownFn,
                            itemArea        : options.itemArea,
                            readTemplate    : options.readTemplate,
                            modal_edit_title : options.modal_edit_title,
                            modal_template  : options.modal_template,
                            modal_edit      : options.modal_edit,
                            form_event      : options.form_event,
                            form_event_fn   : options.form_event_fn,
                            editDisableCondition : options.editDisableCondition,
                            view_refresh_event : options.child_view_refresh_event,
                            onRender : render_callback
                        },
                        onRender : function() {
                            jQuery(this.$el).find('.bpopover').popover({
                                        html: true,
                                        trigger: 'hover'
                                    });
                        }
                    });
                    
        var collectionView = new viewType({
                        collection          : collection,
                        view_refresh_event  : options.view_refresh_event,
                        tagName             : typeof options.collection_tagName != 'undefined'  ? options.collection_tagName : 'div'
                    });

        if (options.place) {
            collectionView.render();
            $(options.place).html(collectionView.el);
        } else {
            options.region.show(collectionView);
        }
    };
    
    
    /*
     * 
     */    
    CompositeView = Backbone.Marionette.CompositeView.extend({
        itemView: ItemView,

        initialize : function(options) {
            this.options = options || {};
            eventAggregator.on(this.options.view_refresh_event, this.refreshList, this);
        },
        
        refreshList : function() {
            this.collection.fetch({});
        }
    });
    
    /*
     * 
     */
    function renderComposite(collection, options) {
        if(options.viewType.toLowerCase() == "composite"){
        	var view = CompositeView;
        } else {
        	var view  = CollectionView;
        }
        
        
        viewType = view.extend({
            attributes          : options.collection_attributes,
            itemViewOptions     : {
                template        : options.itemTemplate,
                className       : options.itemClassName,
                newTitle        : options.newTitle,
                editTitle       : options.editTitle,
                attributes      : options.view_attributes,
                syncCallback    : options.updateCallback,
                tagName         : typeof options.itemTagName != 'undefined'  ? options.itemTagName : 'div',
                url             : options.modelURL,
                selectFn        : options.selectFn,
                clearFn         : options.clearFn,
                copyFn          : options.copyFn,
                previewFn       : options.previewFn,
                drillDownFn     : options.drillDownFn,
                itemArea        : options.itemArea,
                readTemplate    : options.readTemplate,
                modal_edit_title : options.modal_edit_title,
                modal_template  : options.modal_template,
                modal_edit      : options.modal_edit,
                form_event      : options.form_event,
                form_event_fn   : options.form_event_fn,
                editDisableCondition : options.editDisableCondition,
                view_refresh_event : options.child_view_refresh_event
            },
            itemViewContainer : options.itemViewContainer,
            template : options.collectionTemplate,
            emptyView : options.emptyView,
            emptyViewOptions : options.emptyViewOptions,
            onRender : function() {
                jQuery(this.$el).find('.bpopover').popover({
                    html: true,
                    trigger: 'hover'
                });
                
                if ( collection.length == 0 && typeof options.renderControl != 'undefined'){
                	TabUtils.createTabControl({
		                template                : options.renderControl.template,
		                modelType               : options.renderControl.modelType,
		                view_refresh_event      : options.renderControl.view_refresh_event,
		                modal_create_title      : options.renderControl.modal_create_title,
		                region                  : options.renderControl.region,
			            id                      : options.renderControl.id,
			            id_name                 : options.renderControl.id_name
		            });
                };
                if (typeof options.hideDeleteButton == 'undefined'){
	                if (collection.length == 1) {
	                	this.$(".model-delete-button").hide();
	                } else {
	                	this.$(".model-delete-button").show();
	                }
                };
            },
            refreshList : function() {
	            var that = this;
	            this.collection.fetch({
	            	success : function(collection){
	            		if (typeof options.hideDeleteButton == 'undefined'){
		            		if (collection.length == 1) {
				            	that.$(".model-delete-button").hide();
				            } else {
				            	that.$(".model-delete-button").show();
				            };
			            };
			            if (typeof options.renderControl != 'undefined'){
				            if (collection.length == 0){
                            	TabUtils.createTabControl({
					                template                : options.renderControl.template,
					                modelType               : options.renderControl.modelType,
					                view_refresh_event      : options.renderControl.view_refresh_event,
					                modal_create_title      : options.renderControl.modal_create_title,
					                region                  : options.renderControl.region,
						            id                      : options.renderControl.id,
						            id_name                 : options.renderControl.id_name
					            });
                      		} else { 
	                      		options.renderControl.region.reset();
                      		};
                  		};
	            	}
	            });
	        }
        });
                    
        var collectionView = new viewType({
            collection          : collection,
            view_refresh_event  : options.view_refresh_event,
            tagName             : typeof options.collection_tagName != 'undefined'  ? options.collection_tagName : 'div'
        });
        

        if (options.place) {
            collectionView.render();
            $(options.place).html(collectionView.el);
        } else {
            options.region.show(collectionView);
        }
    };
    
    
    /*
     * 
     */
    Conflict = Backbone.RelationalModel.extend({});
    ConflictCollection = Backbone.Collection.extend({
        model : Conflict
    });
    
    Conflicts = Backbone.RelationalModel.extend({
        relations : [{
            type           : Backbone.HasMany,
            key            : 'schedule',
            relatedModel   : 'Conflict',
            collectionType : 'ConflictCollection',
            // collectionKey  : false, // cause there is no reference from the collection back to the containiing model
        }, {
            type           : Backbone.HasMany,
            key            : 'room',
            relatedModel   : 'Conflict',
            collectionType : 'ConflictCollection',
            // collectionKey  : false, // cause there is no reference from the collection back to the containiing model
        }, {
            type           : Backbone.HasMany,
            key            : 'excluded_item',
            relatedModel   : 'Conflict',
            collectionType : 'ConflictCollection',
            // collectionKey  : false, // cause there is no reference from the collection back to the containiing model
        }, {
            type           : Backbone.HasMany,
            key            : 'excluded_time',
            relatedModel   : 'Conflict',
            collectionType : 'ConflictCollection',
            // collectionKey  : false, // cause there is no reference from the collection back to the containiing model
        }, {
            type           : Backbone.HasMany,
            key            : 'availability',
            relatedModel   : 'Conflict',
            collectionType : 'ConflictCollection',
            // collectionKey  : false, // cause there is no reference from the collection back to the containiing model
        }, {
            type           : Backbone.HasMany,
            key            : 'back_to_back',
            relatedModel   : 'Conflict',
            collectionType : 'ConflictCollection',
            // collectionKey  : false, // cause there is no reference from the collection back to the containiing model
        }]
    });

    ConflictView = Marionette.ItemView.extend({
        events: {
            "click .conflict": "selectConflict",
            "click .exclude": "excludeConflict"
        },
        
        initialize : function(options) {
            this.options = options || {};
        },
        
        selectConflict : function(ev) {
            // scroll to the problem item
            room_name = this.model.get('room_name');
            time = this.model.get('item_start');
            item_id = this.model.get('item_id'); // g id
            
            DailyGrid.scrollTo(room_name, time);
        },
        
        excludeConflict : function(ev) {
            var model = this.model;
            var baseUri = this.options.baseUri ? this.options.baseUri : '';
            modal = new AppUtils.ConfirmModel({
                title : translate("remove_exclusion_confirmation"),
                content : translate("remove_exclusion")  + (model.get('person_name') ? model.get('person_name') : model.get('room_name')) ,
                continueAction : function() {
                    data = { conflict_exception : {
                            conflict_type : model.get('type')
                        } };
                        
                    switch (model.get('type')) {
                        case 'schedule' :
                            data['conflict_exception']['affected'] = model.get('person_id');
                            data['conflict_exception']['src1'] = model.get('item_id');
                            data['conflict_exception']['src2'] = model.get('conflict_item_id');
                            break;
                        case 'room' :
                            data['conflict_exception']['affected'] = model.get('room_id');
                            data['conflict_exception']['src1'] = model.get('item_id');
                            data['conflict_exception']['src2'] = model.get('conflict_item_id');
                            break;
                        case 'item' :
                            data['conflict_exception']['affected'] = model.get('person_id');
                            data['conflict_exception']['src1'] = model.get('item_id');
                            data['conflict_exception']['src2'] = model.get('conflict_item_id');
                            break;
                        case 'time' :
                            data['conflict_exception']['affected'] = model.get('person_id');
                            data['conflict_exception']['src1'] = model.get('item_id');
                            data['conflict_exception']['src2'] = model.get('period_id');
                            break;
                        case 'avail' :
                            data['conflict_exception']['affected'] = model.get('person_id');
                            data['conflict_exception']['src1'] = model.get('item_id');
                            data['conflict_exception']['src2'] = model.get('period_id');
                            break;
                        case 'back2back' :
                            data['conflict_exception']['affected'] = model.get('person_id');
                            data['conflict_exception']['src1'] = model.get('item_id');
                            data['conflict_exception']['src2'] = model.get('conflict_item_id');
                            break;
                    };
                        
                    $.ajax({
                        url : baseUri + "/items/confict_exceptions",
                        type : 'POST',
                        data : data,
                        success : function() {
                            // and refresh the conflict list
                            eventAggregator.trigger("refreshConflicts");
                        }
                    });
                },
                closeAction : function() {
                }
            });
            modal.render();
            
        }
    });
    
    ConflictCollectionView = Backbone.Marionette.CollectionView.extend({
        itemView : ConflictView,
        
        initialize : function(options) {
            this.options = options || {};
        },
        
        // build the view using a dynamic template based on itemViewTemplate
        buildItemView: function(item, ItemViewType, itemViewOptions){
            var options = _.extend({
                model    : item,
                template : this.options.itemViewTemplate,
                baseUri  : this.options.baseUri
                }, itemViewOptions);
            
            var view = new ItemViewType(options);

            return view;
        }
    });
    
    ConflictLayout = Backbone.Marionette.Layout.extend({
        regions : {
            scheduleRegion     : "#schedule-region-div",
            roomRegion         : "#room-region-div",
            excludedItemRegion : "#excluded-item-region-div",
            excludedTimeRegion : "#excluded-time-region-div",
            availabilityRegion : "#availability-region-div",
            backToBackRegion   : "#back-to-back-region-div",
        },
    });
        
    /*
     * 
     */
    return {
        
        partial : function(part, data) {
            return _.template( $('#' + part ).html(), data);
        },
        
        eventAggregator : eventAggregator,

        setMessage : setMessage,
        
        InfoModal : InfoModal,
        
        ConfirmModel : ConfirmModel,
        
        GenericModal : GenericModal,
        
        FormModal : FormModal,
        
        ModelModal : ModelModal,
        
        FileModelModal : FileModelModal,
        
        PanelModal : PanelModal,
        
        PlainPanelModal : PlainPanelModal,
        
        createEditItemView : function(options) {
            var view = new ItemEditView({
                            model           : options.model,
                            template        : options.template,
                            newTitle        : options.newTitle,
                            editTitle       : options.editTitle,
                            attributes      : options.view_attributes,
                            syncCallback    : options.updateCallback,
                            tagName         : typeof options.tagName != 'undefined'  ? options.tagName : 'div',
                            url             : options.modelURL,
                            resetFn         : options.resetFn,
                            // selectFn        : options.selectFn,
                            // clearFn         : options.clearFn,
                            // copyFn          : options.copyFn,
                            // previewFn       : options.previewFn,
                            // drillDownFn     : options.drillDownFn,
                            itemArea        : options.itemArea,
                            readTemplate    : options.readTemplate,
                            modal_template  : options.modal_template,
                            form_init       : options.form_init
            });
            
            view.render();
            $(options.itemArea).html(view.$el);
            
            return view;
        },
        
        createCollectionView : function(options) {
            if (!options.collection) {
                collection = new options.collectionType();
                collection.url = options.url;
                collection.fetch({
                    success : function(col) {
                        renderCollection(col, options);
                    }
                });
            } else {
                renderCollection(options.collection, options);
            };

            return collection;
        },
        
        createCompositeView : function(options) {
            if (!options.collection) {
                collection = new options.collectionType();
                collection.url = options.url;
                collection.fetch({
                    success : function(col) {
                        renderComposite(col, options);
                    }
                });
            } else {
                renderComposite(options.collection, options);
            };

            return collection;
        },
        
        ConflictLayout : ConflictLayout,
        Conflicts : Conflicts,
        
        createConflictCollectionView : function (collection, viewTemplate, region, baseUri) {
            var collectionView = new ConflictCollectionView({
                collection : collection,
                itemViewTemplate : viewTemplate,
                baseUri : baseUri
            });
            region.show(collectionView);
        },

        arrayToString : function(cellvalue) {
            if (cellvalue) {
                return cellvalue.join(",<br/>");
            } else {
                return '';
            }
        },

        booleanToString : function(cellvalue) {
            if (cellvalue) {
                return 'Y';
            } else {
                return 'N';
            }
        },

        arrayToStringSingleLine : function(cellvalue) {
            if (cellvalue) {
                return cellvalue.join(", ");
            } else {
                return '';
            }
        }
    
    };
})();
