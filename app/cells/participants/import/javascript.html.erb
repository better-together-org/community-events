<script type="text/javascript">

ParticipantApp = new Backbone.Marionette.Application();

ParticipantApp.PeopleImport = (function(Backbone){
    
    //
    //
    //
    DataSource = Backbone.Model.extend({
        schema : {
             datasource_id : { type : 'Select', title : '<%= t "data-source" %>',
              options : <%= [{'val' => nil, 'label' => ' '}].concat(Datasource.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %>,
              validators: ['required']
              }
        }
    });
    
    CSVUpload = Backbone.Model.extend({
        schema : {
            file_upload  : { type : 'FileUpload', title : '<%= t "csv-for-import" %>', handler : '/file_uploads' },
        }
    });
    
    ImportMapping = Backbone.Model.extend({
        schema : {
        },
        urlRoot : "<%= baseUri + '/import_mappings' %>",
        
        defaults : {
            'prefix' : null,
            'first_name' : null,
            'last_name' : null,
            'suffix' : null,
            'pub_prefix' : null,
            'pub_first_name' : null,
            'pub_last_name' : null,
            'pub_suffix' : null,
            'job_title' : null,
            'company' : null,
            'line1' : null,
            'line2' : null,
            'city' : null,
            'postcode' : null,
            'state' : null,
            'country' : null,
            'phone' : null,
            'email' : null,
            'registration_number' : null,
            'registration_type' : null,
            'datasource_dbid' : null,
            'bio' : null,
            'invite_status' : null,
            'invite_category' : null,
            'accept_status' : null
        }
    });
    
    CSVColumn = Backbone.Model.extend({
    });
    CSVColumns = Backbone.Collection.extend({
        model : CSVColumn
    });
    
    ImportParams = Backbone.Model.extend({
        schema : {
            datasource_id : { type : 'Hidden' },
            file : { type : 'Hidden' },
            ignore_first : { type : 'Checkbox', title : '<%= t "people-import-wizard-ignore-first-line" %>', help: '<%= t "people-import-wizard-ignore-first-line-hint" %>' }
        },
        urlRoot : "<%= baseUri + '/pending_import_people/import_file' %>"
    });
    
    
    //
    // Layout for steps
    //
    ImportStepsLayout = Backbone.Marionette.Layout.extend({
        template : '#step-layout',
        
        regions : {
            control : "#control",
            current_step : "#current-step"
        }
    });
    
    
    //
    // View(s) for step(s)
    //
    ControlView = Backbone.Marionette.ItemView.extend({
        template : '#step-control',
        
        events : {
            'click .next-step' : 'gotoNextStep',
            'click .back-step' : 'gotoBackStep'
        },
        
        gotoBackStep : function() {
            currentStep = currentStep > 1 ? currentStep - 1 : 1;
            importLayout.current_step.show(stepToView[currentStep].view);
            $('.bpopover').popover({html : true});
            if (stepToView[currentStep].start_func) {
                stepToView[currentStep].start_func(stepToView[currentStep].view);
            }
        },
        
        gotoNextStep : function() {
            var success = false
            if (stepToView[currentStep].event && !(stepToView[currentStep].view.process)) {
                success = true;
                AppUtils.eventAggregator.trigger(stepToView[currentStep].event);
            } else {
                success = stepToView[currentStep].view.process();
            };
            if (success) {
                if (currentStep < 5) {
                    currentStep = currentStep < 5 ? currentStep + 1 : 5;
                    if (stepToView[currentStep].start_func) {
                        stepToView[currentStep].start_func(stepToView[currentStep].view);
                    }
                    importLayout.current_step.show(stepToView[currentStep].view);
                    $('.bpopover').popover({html : true});
                    if (currentStep == 5) { // if we have completed the process then we do not allow the user to go back
                        importLayout.control.close();
                    }
                }
            }
        }
    });
    
    MappingLayout = Backbone.Marionette.Layout.extend({
        template : '#mapping-layout',
        
        regions : {
            mapping : "#mapping",
            source  : "#source"
        }
    });
    
    ResultLayout = Backbone.Marionette.Layout.extend({
        template : '#result-layout',
        
        regions : {
            result : "#result",
        }
    });
    
    ResultView = Backbone.Marionette.ItemView.extend({
        template : "#result-template"
    });
    
    MappingView = Backbone.Marionette.ItemView.extend({
        template : "#step-3",

        initialize : function() {
            AppUtils.eventAggregator.on('STEP3', this.moveon, this);
            AppUtils.eventAggregator.on('update_mapping', this.render, this);
        },

        events : {
            "click .remove-mapping" : "remove_mapping",
            "drop"   : "drop"
        },
        
        remove_mapping : function(ev) {
            var element_name = ev.currentTarget.getAttribute('mapping');
            this.model.set(element_name, null);
            AppUtils.eventAggregator.trigger('update_mapping');
        },
        
        render : function() {
            var m = this.model.toJSON();
            m['src'] = this.options.source;
            this.$el.html(_.template($('#step-3').html(), m));
            
            var thisView = this;
            this.$el.find(".ui-droppable").droppable();
        },

        drop : function(event, src) {
            var colId = $(src.draggable).parent().find('.column').attr('id'); // get the id of the dragged object
            var targetId = $(event.target).attr("id");
            this.model.set(targetId, colId);
            this.render();
        },
        
        moveon : function() {
            // Save the model ...
            this.model.save();
        }
        
    });
    
    SourceItemView = Backbone.Marionette.ItemView.extend({
        template : "#csv-source",
        tagName : 'li',
        className: "list-group-item",
        
        render : function() {
            // alert(this.options.mapping);
            var x = this.options.mapping;
            var m = this.model.toJSON();
            m['mapping'] = this.options.mapping;
            this.$el.html(_.template($("#csv-source").html(), m));
        }
    });
    
    SourceView = Backbone.Marionette.CollectionView.extend({
        events : {
            "stop"   : "stopdrag"
        },
        
        initialize : function() {
            AppUtils.eventAggregator.on('update_mapping', this.render, this); // need to reset the daggables...
        },
        
        itemViewOptions: function(model, index) {
            return { 
                    mapping : this.options.mapping
                }
        },

        itemView : SourceItemView,
        tagName : 'ul',
        onRender : function() {
            var thisView = this;
            this.$el.find( ".ui-draggable" ).draggable({
                 revert: true, // return to origin if not dropped on droppable area
                 stop : function() {
                    // TODO - need to mark the item as mapped
                    thisView.render();
                 }
            });
        }
    });

    StepView = Backbone.Marionette.ItemView.extend({
        initialize : function() {
            this.template = this.options.template;
            AppUtils.eventAggregator.on(this.options.eventName, this.process, this);
        },

        validate : function() {
            res = null;
            if (this.form) {
                res = this.form.validate();
            };
            return res;
        },
        
        process : function(eventName) {
            var res = true;
            // Need to validate the form on the next step choice and make sure the values are recorded
            if (this.form) {
                var errors = this.form.commit();
                res = (typeof errors === 'undefined')
            };
            return res;
        },
        
        // Display the model in the view
        onShow : function() {
            if (this.model) {
                if (this.options.form_template) {
                    this.form = new Backbone.Form({
                        model: this.model,
                        template: _.template($(this.options.form_template).html())
                    }).render();
                } else {
                    this.form = new Backbone.Form({
                        model: this.model
                    }).render();
                };
                this.$el.find("#form").html(this.form.el);
            };
        }
    });

    var importLayout = null;
    var currentStep = 1;
    var stepToView = {
        1 : {
            // Select the data source for the import
            view : new StepView({ template: '#step-1', form_template : "#data-source-template", model : new DataSource(), eventName : 'STEP1'}),
            event : 'STEP1',
            start_func : function(layout) {
                $("[id$=indicator]").css('background-color', 'white');
                $('#step-1-indicator').css('background-color', 'lightgray');
            }
        },
        2 : {
            // Upload the file
            view : new StepView({ template: '#step-2', model : new CSVUpload(), eventName : 'STEP2'}),
            event : 'STEP2',
            start_func : function(layout) {
                $("[id$=indicator]").css('background-color', 'white');
                $('#step-2-indicator').css('background-color', 'lightgray');
            }
        },
        3 : {
            // Need to get the CSV columns (first row) from the file and display a form for the mapping
            view    : new MappingLayout(),
            event   : 'STEP3',
            start_func : function(layout) {
                $("[id$=indicator]").css('background-color', 'white');
                $('#step-3-indicator').css('background-color', 'lightgray');
                // Get the current import mapping for the selected datasource
                var datasource = stepToView[1].view.model.get('datasource_id');
                
                // Get the name of the file containing the data to be uploaded
                var uploadFilename = stepToView[2].view.model.get('file_upload').split('\\').pop();
                csvColumns = new CSVColumns();
                csvColumns.fetch({
                    url : "<%= baseUri + '/import_mappings/columns?file=' %>" + uploadFilename,
                    success : function(mdl) {
                        mapping = new ImportMapping();
                        mapping.fetch({
                            url : "<%= baseUri + '/import_mappings?datasource_id=' %>" + datasource,
                            success : function(model) {
                                model.set('datasource_id',datasource);
                                layout.mapping.show(new MappingView({ model : model, source : mdl }));
                                // TODO - we also want to be able to show the mapping using the current file once it is loaded and there is an existing mapping
                                layout.source.show(new SourceView({ collection : mdl, mapping : model }));
                            }
                        });
                
                    }
                });
            }
        },
        4 : {
            // Perform the import
            view : new StepView({ template: '#step-4', model : new ImportParams(), eventName : 'STEP4'}),
            event : 'STEP4',
            start_func : function(layout) { // This is called after the form render ?
                $("[id$=indicator]").css('background-color', 'white');
                $('#step-4-indicator').css('background-color', 'lightgray');
                var datasource = stepToView[1].view.model.get('datasource_id');
                var uploadFilename = stepToView[2].view.model.get('file_upload').split('\\').pop().split("/").pop();
                stepToView[4].view.model.set('datasource_id',datasource);
                stepToView[4].view.model.set('file',uploadFilename);
            }
        },
        5 : {
            // Review the results
            view : new ResultLayout(), //StepView({ template: '#step-5', model : null, eventName : 'STEP5'}),
            event : 'STEP5',
            start_func : function(layout) {
                $("[id$=indicator]").css('background-color', 'white');
                $('#step-5-indicator').css('background-color', 'lightgray');
                // This will trigger the execution of the actual import
                stepToView[4].view.model.save({}, {
                    success : function(mdl) {
                        layout.result.show( new ResultView({model : mdl }) );
                    }
                });
            }
        }
    };
    
    //
    //
    //    
    return {
        
        column_name(src, col) {
            if (typeof(src.models[col]) != 'undefined') {
                return src.models[col].get('name');
            } else {
                return 'undefined';
            }
        },
        
        init : function(options) {
            importStepsRegion = new Backbone.Marionette.Region({
                el: "#step-region"
            });
            
            importLayout = new ImportStepsLayout();
            importStepsRegion.show(importLayout);
            
            importLayout.control.show(new ControlView());
                if (stepToView[currentStep].start_func) {
                    stepToView[currentStep].start_func(stepToView[currentStep].view);
                }
            importLayout.current_step.show(stepToView[currentStep].view);
        }
    };
})(Backbone);

/*
 * 
 */
jQuery(document).ready(function() {
    ParticipantApp.addInitializer(ParticipantApp.PeopleImport.init);
    ParticipantApp.start({});
});
</script>
