<script type="text/javascript">

ReportApp = new Backbone.Marionette.Application();

ReportApp.ReportManagement = (function(Backbone){

    var eventAggregator = AppUtils.eventAggregator;
    
    var GenericForm = Backbone.Form.extend({
    });
    
    var PanelsWithOnePersonColModel= [
                    {name: 'title',       label : '<%= t "item" %>',  jsonmap: "title",    width: 300},
                    {name: 'name', label : '<%= t "person" %>', jsonmap: "name", width: 150},
                    {name: 'company', label : '<%= t "company" %>', jsonmap: "company", width: 150},
                    {name:'Items', label : '<%= t "items" %>', jsonmap: "items", width: 500, formatter: AppUtils.arrayToString}
    ];
    
    var OverusedPeopleAllocationColModel = [
                    {name: 'name', label : '<%= t "person" %>', jsonmap: "name", width: 150},
                    {name: 'num_of_items', label : '<%= t "number-of-items" %>', jsonmap: "nbr_items"},
                    {name: 'max_per_day', label : '<%= t "max-number-per-day" %>', jsonmap: "max_items_per_day"},
                    {name: 'max_per_con', label : '<%= t "max-number-per-con" %>', jsonmap: "max_items_per_con"},
                    {name:'Items', label : '<%= t "items" %>', jsonmap: "items", width: 500, formatter: AppUtils.arrayToString}
    ];
    
    var PeopleAllocationColModel = [
                    {name: 'name', label : '<%= t "person" %>', jsonmap: "name", width: 150},
                    {name: 'organization', label : '<%= t "organization" %>', jsonmap: "company"},
                    {name: 'day', label : '<%= t "day" %>', jsonmap: "day_str"},
                    {name: 'date', label : '<%= t "item-date" %>', jsonmap: "date_str"},
                    {name: 'num_of_items', label : '<%= t "number-of-items" %>', jsonmap: "nbr_items"},
                    {name: 'max_per_day', label : '<%= t "max-number-per-day" %>', jsonmap: "max_items_per_day"},
                    {name: 'max_per_con', label : '<%= t "max-number-per-con" %>', jsonmap: "max_items_per_con"},
                    {name:'Items', label : '<%= t "items" %>', jsonmap: "items", width: 500, formatter: AppUtils.arrayToString}
    ];

    var ItemCapacityColModel = [
                    {name: 'title',       label : '<%= t "item" %>',  jsonmap: "title",    width: 300},
                    {name: 'item-date',         label : '<%= t "item-date" %>',                     jsonmap: 'date'},
                    {name: 'item-day',          label : '<%= t "item-day" %>',                      jsonmap: 'day'},
                    {name: 'item-start-time',   label : '<%= t "item-start-time" %>',               jsonmap: 'start_time'},
                    {name: 'End Time',          label : '<%= t "item-end-time" %>',                 jsonmap: 'end_time'},
                    // {name: 'item-start-time', label : '<%= t "item-start-time" %>', jsonmap: 'start_time'},
                    // {name: 'End Time', label : '<%= t "item-end-time" %>', jsonmap: 'end_time'},
                    {name:'Venue', label : '<%= t "venue" %>', jsonmap: "venue_name"},
                    {name:'Room', label : '<%= t "room" %>', jsonmap: "room_name"},
                    {name:'Capacity', label : '<%= t "capacity" %>', jsonmap: "capacity"},
                    {name:'Audience', label : '<%= t "item-estimated-audience-size" %>', jsonmap: "audience"},
    ];
    
    var ItemsWithoutTagsColModel = [
                    {name: 'title',       label : '<%= t "item" %>',  jsonmap: "title",    width: 300},
                    {name: 'item-date',         label : '<%= t "item-date" %>',                     jsonmap: 'date'},
                    {name: 'item-day',          label : '<%= t "item-day" %>',                      jsonmap: 'day'},
                    {name: 'item-start-time',   label : '<%= t "item-start-time" %>',               jsonmap: 'start_time'},
                    {name: 'End Time',          label : '<%= t "item-end-time" %>',                 jsonmap: 'end_time'},
                    {name:'Venue', label : '<%= t "venue" %>', jsonmap: "venue_name"},
                    {name:'Room', label : '<%= t "room" %>', jsonmap: "room_name"},
    ];
    
    var PanelsByRoomColModel = [
                    {name: 'room',      label : '<%= t "room" %>',  jsonmap: "room", width: 50},
                    {name: 'venue',     label : '<%= t "venue" %>', jsonmap: "venue", width: 50},
                    {name: 'date',       label : '<%= t "item-date" %>',  jsonmap: "date",    width: 30},
                    {name: 'day',       label : '<%= t "item-day" %>',  jsonmap: "day",    width: 30},
                    {name: 'start-time',      label : '<%= t "item-start-time" %>',  jsonmap: "start_time",    width: 30},
                    {name: 'end-time',      label : '<%= t "item-end-time" %>',  jsonmap: "end_time",    width: 30},
                    {name: 'item',      label : '<%= t "item" %>',  jsonmap: "item" }
    ];
    
    var PanelsByTimeslotColModel = [
                    {name: 'item-date',         label : '<%= t "item-date" %>',         jsonmap: 'date',        width: 50},
                    {name: 'day',               label : '<%= t "item-day" %>',          jsonmap: "day",         width: 30},
                    {name: 'item-start-time',   label : '<%= t "item-start-time" %>',   jsonmap: 'start_time',  width: 50},
                    {name: 'End Time',          label : '<%= t "item-end-time" %>',     jsonmap: 'end_time',    width: 50},
                    {name: 'room',              label : '<%= t "room" %>',              jsonmap: "room",        width: 50},
                    {name: 'venue',             label : '<%= t "venue" %>',             jsonmap: "venue",       width: 50},
                    {name: 'item',              label : '<%= t "item" %>',              jsonmap: "item" }
    ];

    var PanelsWithPanelistsForm = Backbone.Form.extend({
        schema : {
            modified_since  : { type : 'Date', title : '<%= t "report-selection-modified-since" %>' },
            sort_by : { type : 'Select', title : '<%= t "report-selection-sort-by" %>', options : [{ val: 'time', label: 'Date/Time' }, { val: 'room', label: 'Room' }, { val: 'title', label: 'Title' }] },
            scheduled       : { type : 'Checkbox', title : '<%= t "report-selection-only-scheduled-items" %>'}, // Include scheduled panels only
            // description     : { type : 'Checkbox'}, // Include item descriptions
            format_id       : { type : 'Select', title : '<%= t "report-selection-item-format" %>', title : '<%= t "report-selection-item-format" %>', options : <%= [{'val' => -1, 'label' => 'All'}].concat(Format.all.to_a.collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %> },
            fewer_than      : { type : 'Number', title : '<%= t "report-selection-with-fewer-than" %>'},
            more_than       : { type : 'Number', title : '<%= t "report-selection-with-more-than" %>'}
        },
        
        data : {
            sort_by : 'time',
            modified_since : new Date('January 1, 2000')
        }
        
    });
    
    var PanelistsWithPanelsForm = Backbone.Form.extend({
        schema : {
            scheduled   : { type : 'Checkbox', title : '<%= t "report-selection-only-scheduled-items" %>'}, // Include scheduled panelists only
            invisible   : { type : 'Checkbox', title : '<%= t "report-selection-include-invisible-participants" %>'},
            reserved    : { type : 'Checkbox', title : '<%= t "report-selection-include-reserved-participants" %>'},
            forprint    : { type : 'Checkbox', title : '<%= t "report-selection-only-items-for-print" %>'},
            format_id       : { type : 'Select', title : '<%= t "report-selection-item-format" %>', title : '<%= t "report-selection-item-format" %>', options : <%= [{'val' => -1, 'label' => 'All'}].concat(Format.all.to_a.collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %> }
        },
        
        data : {
        }
    });
    
    var ItemWordCountsForm = Backbone.Form.extend({
        schema : {
            title_size   : { type : 'Number', title : '<%= t "report-title-word-count" %>'},
            short_title_size    : { type : 'Number', title : '<%= t "report-short-title-word-count" %>'},
            description_size    : { type : 'Number', title : '<%= t "report-description-word-count" %>'},
            short_description_size    : { type : 'Number', title : '<%= t "report-short-description-word-count" %>'}
        },
        
        data : {
            title_size : 100,
            short_title_size : 100,
            description_size : 150,
            short_description_size : 150,
        }
    });
    
    var PeopleWithoutPanelsForm = Backbone.Form.extend({
    });
    
    var TagsByContextForm = Backbone.Form.extend({
        schema : {
            context : { type : 'Select', title : '<%= t "report-selection-for-tag-context" %>', 
                options : <%= TagContext.all.order('name').to_a.collect {|s| {'val' => s.name, 'label' => s.name} }.to_json.html_safe %> },
        },
        
        data : {
        }
    });
    
    var PeopleByTagForm = Backbone.Form.extend({
        schema : {
            tags  : { type : 'Text', title : '<%= t "tags" %>' },
        },
        
        data : {
        }
    });
    
    var PeopleBioColModel = [
                    {name: 'name', label : '<%= t "person" %>', jsonmap: "name", width: 150},
                    {name: 'company', label : '<%= t "company" %>', jsonmap: "company", width: 150},
                    {name: 'bio', label : '<%= t "bio" %>', jsonmap: "bio", width: 700, 
                            cellattr: function (rowId, tv, rawObject, cm, rdata) { return 'style="height: auto; white-space: normal;"' }},
                    {name: 'website', label : '<%= t "participant-url" %>', jsonmap: "website"},
                    {name: 'twitterinfo', label : '<%= t "participant-twitter-handle" %>', jsonmap: "twitterinfo"},
                    {name: 'othersocialmedia', label : '<%= t "other-social-media" %>', jsonmap: "othersocialmedia"},
                    {name: 'photourl', label : '<%= t "participant-photo" %>', jsonmap: "photourl"},
                    {name: 'facebook', label : '<%= t "participant-facebook-url" %>', jsonmap: "facebook"},
                    {name: 'linkedin', label : '<%= t "participant-linkedin-url" %>', jsonmap: "linkedin"}
    ];
    
    var PeopleByTagColModel = [
                    {name: 'context', label : '<%= t "tag-context" %>', jsonmap: "context", width: 100},
                    {name: 'tag', label : '<%= t "tags" %>', jsonmap: "tag", width: 100},
                    {name: 'people', label : '<%= t "reports-people" %>', jsonmap: "people", formatter: AppUtils.arrayToStringSingleLine}
    ];
    
    var TagsByContextColModel = [
                    {name: 'Name', label : '<%= t "person" %>', jsonmap: "name", width: 100},
                    {name: 'Tags', label : '<%= t "tags" %>', jsonmap: "tags", width: 300, formatter: AppUtils.arrayToStringSingleLine}
    ];
    
    var PanelistsWithPanelsColModel = [
                    {name: 'Name', label : '<%= t "person" %>', jsonmap: "name", width: 130},
                    {name: 'Company', label : '<%= t "company" %>', jsonmap: "company", width: 100},
                    {name: 'Email', label : '<%= t "email" %>', jsonmap: "email", width: 100},
                    {name: 'Registered', label : '<%= t "registered" %>', jsonmap: "registered", width: 20, formatter: AppUtils.booleanToString},
                    {name: 'Reg #', label : '<%= t "reg-number" %>', jsonmap: "registration_number", width: 60},
                    {name: 'Status', label : '<%= t "acceptance-status" %>', jsonmap: "acceptance_status", width: 60},
                    {name:'Items', label : '<%= t "items" %>', jsonmap: "items", width: 500, formatter: AppUtils.arrayToString}
    ];
    
    var PeopleWithoutPanelsColModel = [
                    {name: 'Name', label : '<%= t "person" %>', jsonmap: "name", width: 130},
                    {name: 'Invite Status', label : '<%= t "invite-status" %>', jsonmap: "invitestatus", width: 60},
                    {name: 'Acceptance Status', label : '<%= t "acceptance-status" %>', jsonmap: "acceptance_status", width: 60}
    ];
    
    var PanelsWithPanelistsColModel = [
                    {name: 'item-date',         label : '<%= t "item-date" %>',                     jsonmap: 'date'},
                    {name: 'item-day',          label : '<%= t "item-day" %>',                      jsonmap: 'day'},
                    {name: 'item-start-time',   label : '<%= t "item-start-time" %>',               jsonmap: 'start_time'},
                    {name: 'End Time',          label : '<%= t "item-end-time" %>',                 jsonmap: 'end_time'},
                    {name: 'Venue',             label : '<%= t "venue" %>',                         jsonmap: "venue_name"},
                    {name: 'Room',              label : '<%= t "room" %>',                          jsonmap: "room_name"},
                    {name: 'Format',            label : '<%= t "report-selection-item-format" %>',  jsonmap: 'format'},
                    {name: 'Title',             label : '<%= t "item-title" %>',                    jsonmap: "title", width: 500},
                    {name: 'Nbr',               label : '',                        jsonmap: "nbr_participants"},
                    {name: 'Moderator(s)',      label : '<%= t "moderator(s)" %>',                  jsonmap: 'moderators',width: 300, formatter: AppUtils.arrayToString },
                    {name: 'Participants',      label : '<%= t "item-participants" %>',             jsonmap: 'participants',width: 300, formatter: AppUtils.arrayToString }
                    // {name: 'Ref', label : '<%= t "pub-ref" %>', jsonmap: 'pub_reference_number', width: 100},
                    // {name: 'Area(s)', label : '<%= t "area(s)" %>', jsonmap: 'context', formatter: AppUtils.arrayToString},
                    // {name: 'Min People', label : '<%= t "item-min-participants" %>', jsonmap: 'minimum_people'},
                    // {name: 'Max People', label : '<%= t "item-max-participants" %>', jsonmap: 'maximum_people'},
                    // {name: 'Reserve', label : '<%= t "reserved" %>', jsonmap: 'reserve',width: 300,formatter: AppUtils.arrayToString},
                    // {name: 'Invisible', label : '<%= t "invisible" %>', jsonmap: 'invisible',width: 300, formatter: AppUtils.arrayToString},
                ];

    var ItemWordCountsColModel = [
                    {name: 'Title', label : '<%= t "item-title" %>', jsonmap: 'title', width: 100},
                    {name: 'Title Words', label : '<%= t "item-title-words" %>', jsonmap: 'title_words'},
                    {name: 'Short Title', label : '<%= t "item-short-title" %>', jsonmap: 'short_title'},
                    {name: 'Short Title Words', label : '<%= t "item-short-title-words" %>', jsonmap: 'short_title_words'},
                    // {name: 'Description', label : '<%= t "item-description" %>', jsonmap: 'description'},
                    {name: 'Description Words', label : '<%= t "item-description-words" %>', jsonmap: 'description_words'},
                    // {name: 'Short Description', label : '<%= t "item-short-description" %>', jsonmap: 'short_description'},
                    {name: 'Shor Description Words', label : '<%= t "item-short-description-words" %>', jsonmap: 'short_description_words'}
                ];

    var conflicts = null;
    
    var Workspace = Backbone.Router.extend({

        routes : {
            'panels_with_no_moderator' : 'panels_with_no_moderator',
            'panels_with_panelists' : 'panels_with_panelists',
            'panelists_with_panels' : 'panelists_with_panels',
            'people_without_items'  : 'people_without_items',
            'scheduling_conflicts'  : 'scheduling_conflicts',
            'tags_by_context'       : 'tags_by_context',
            'people_by_tags'        : 'people_by_tags',
            'panels_by_room'        : 'panels_by_room',
            'panels_by_timeslot'    : 'panels_by_timeslot',
            'edited_bios'           : 'edited_bios',
            'capacity_report'       : 'capacity_report',
            'people_item_allocation' : 'people_item_allocation',
            'people_with_too_many_items' : 'people_with_too_many_items',
            'items_with_no_tags'    : 'items_with_no_tags',
            'panels_with_one_person' : 'panels_with_one_person',
            'panelists_without_bios' : 'panelists_without_bios',
            'item_word_counts'      : 'item_word_counts'
        },
        
        item_word_counts : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            $('#report-results-area').html('');
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : ItemWordCountsForm,
                endPoint    : "<%= baseUri + '/planner_reports/report_word_counts' %>",
                colModel    : ItemWordCountsColModel,
                caption     : '<%= t "reports-item-word-counts" %>',
                formTemplate : '#report-form-template'
            }));
        },
        
        panelists_without_bios : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            $('#report-results-area').html('');
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : PeopleWithoutPanelsForm,
                endPoint    : "<%= baseUri + '/planner_reports/participants_with_no_bios' %>",
                colModel    : PeopleWithoutPanelsColModel,
                caption     : '<%= t "report-participants-with-no-bios" %>'
            }));
        },
        
        panels_with_one_person : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            $('#report-results-area').html('');
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : GenericForm,
                endPoint    : "<%= baseUri + '/planner_reports/items_with_one_person' %>",
                colModel    : PanelsWithOnePersonColModel,
                caption     : '<%= t "report-items-with-one-person" %>'
            }));
        },
        
        items_with_no_tags : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            $('#report-results-area').html('');
            
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : GenericForm,
                endPoint    : "<%= baseUri + '/planner_reports/items_without_tags' %>",
                colModel    : ItemsWithoutTagsColModel,
                caption     : '<%= t "items-without-tags" %>'
            }));
        },
        
        people_with_too_many_items : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            $('#report-results-area').html('');
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : GenericForm,
                endPoint    : "<%= baseUri + '/planner_reports/people_items_over_max' %>",
                colModel    : OverusedPeopleAllocationColModel,
                caption     : '<%= t "report-people-overused" %>'
            }));
        },
        
        people_item_allocation : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            $('#report-results-area').html('');
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : GenericForm,
                endPoint    : "<%= baseUri + '/planner_reports/people_nbr_items' %>",
                colModel    : PeopleAllocationColModel,
                caption     : '<%= t "report-people-item-allocation" %>'
            }));
        },
        
        capacity_report : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            $('#report-results-area').html('');
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : GenericForm,
                endPoint    : "<%= baseUri + '/planner_reports/capacity_report' %>",
                colModel    : ItemCapacityColModel,
                caption     : '<%= t "reports-items-over-capacity" %>'
            }));
        },
        
        panels_by_room : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            $('#report-results-area').html('');
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : GenericForm,
                endPoint    : "<%= baseUri + '/planner_reports/panels_by_room' %>",
                colModel    : PanelsByRoomColModel,
                caption     : '<%= t "panels-by-room" %>'
            }));
        },
        
        panels_by_timeslot : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            $('#report-results-area').html('');
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : GenericForm,
                endPoint    : "<%= baseUri + '/planner_reports/panels_by_timeslot' %>",
                colModel    : PanelsByTimeslotColModel,
                caption     : '<%= t "panels-by-timeslot" %>'
            }));
        },
        
        panels_with_no_moderator : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            $('#report-results-area').html('');
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : GenericForm,
                endPoint    : "<%= baseUri + '/planner_reports/panels_without_moderator' %>",
                colModel    : PanelsWithPanelistsColModel,
                caption     : '<%= t "report-items-without-moderator" %>'
            }));
        },
                
        panels_with_panelists : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            $('#report-results-area').html('');
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : PanelsWithPanelistsForm,
                endPoint    : "<%= baseUri + '/planner_reports/panels_with_panelists' %>",
                colModel    : PanelsWithPanelistsColModel,
                caption     : '<%= t "report-items-with-participants" %>',
                formTemplate : '#report-form-template'
            }));
        },
        
        panelists_with_panels : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            $('#report-results-area').html('');
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : PanelistsWithPanelsForm,
                endPoint    : "<%= baseUri + '/planner_reports/panelists_with_panels' %>",
                colModel    : PanelistsWithPanelsColModel,
                caption     : '<%= t "report-participants-with-items" %>',
                formTemplate : '#report-form-template'
            }));
        },
        
        people_without_items : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            $('#report-results-area').html('');
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : PeopleWithoutPanelsForm,
                endPoint    : "<%= baseUri + '/planner_reports/people_without_panels' %>",
                colModel    : PeopleWithoutPanelsColModel,
                caption     : '<%= t "report-people-without-items" %>'
            }));
        },
        
        scheduling_conflicts : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            $('#report-results-area').html('');
            
            showSpinner('#report-results-area');
            
            conflictLayout = new AppUtils.ConflictLayout({
                template : "#conflict-layout-template"
            });

            // Render the conflicts for this day
            conflicts = new AppUtils.Conflicts();
            conflicts.fetch({
                url : "<%= baseUri + '/program_planner/getConflicts.json' %>",
                success : function(obj) {
                    ReportBase.resultRegion.show(conflictLayout);
                    AppUtils.createConflictCollectionView(obj.get('schedule'), "#schedule-conflict-view-template",conflictLayout.scheduleRegion, '<%= baseUri %>');
                    AppUtils.createConflictCollectionView(obj.get('room'), "#room-conflict-view-template",conflictLayout.roomRegion, '<%= baseUri %>');
                    AppUtils.createConflictCollectionView(obj.get('excluded_item'), "#excluded-item-conflict-view-template",conflictLayout.excludedItemRegion, '<%= baseUri %>');
                    AppUtils.createConflictCollectionView(obj.get('excluded_time'), "#excluded-time-conflict-view-template",conflictLayout.excludedTimeRegion, '<%= baseUri %>');
                    AppUtils.createConflictCollectionView(obj.get('availability'), "#availability-conflict-view-template",conflictLayout.availabilityRegion, '<%= baseUri %>');
                    AppUtils.createConflictCollectionView(obj.get('back_to_back'), "#back-to-back-conflict-view-template",conflictLayout.backToBackRegion, '<%= baseUri %>');
                } 
            });

            eventAggregator.on("refreshConflicts", this.refreshConflicts, this);
        },

        refreshConflicts : function() {
            conflicts.fetch({
                url : "<%= baseUri + '/program_planner/getConflicts.json' %>",
                success : function(obj) {
                    ReportBase.resultRegion.show(conflictLayout);
                    AppUtils.createConflictCollectionView(obj.get('schedule'), "#schedule-conflict-view-template",conflictLayout.scheduleRegion, '<%= baseUri %>');
                    AppUtils.createConflictCollectionView(obj.get('room'), "#room-conflict-view-template",conflictLayout.roomRegion, '<%= baseUri %>');
                    AppUtils.createConflictCollectionView(obj.get('excluded_item'), "#excluded-item-conflict-view-template",conflictLayout.excludedItemRegion, '<%= baseUri %>');
                    AppUtils.createConflictCollectionView(obj.get('excluded_time'), "#excluded-time-conflict-view-template",conflictLayout.excludedTimeRegion, '<%= baseUri %>');
                    AppUtils.createConflictCollectionView(obj.get('availability'), "#availability-conflict-view-template",conflictLayout.availabilityRegion, '<%= baseUri %>');
                    AppUtils.createConflictCollectionView(obj.get('back_to_back'), "#back-to-back-conflict-view-template",conflictLayout.backToBackRegion, '<%= baseUri %>');
                } 
            });
        },
        
        tags_by_context : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            $('#report-results-area').html('');

            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : TagsByContextForm,
                endPoint    : "<%= baseUri + '/planner_reports/admin_tags_by_context' %>",
                colModel    : TagsByContextColModel,
                caption     : '<%= t "report-tags-by-context" %>',
                formTemplate : '#report-form-template'
            }));
        },
        
        people_by_tags : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            $('#report-results-area').html('');
            
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : PeopleByTagForm,
                endPoint    : "<%= baseUri + '/planner_reports/people_by_tag' %>",
                colModel    : PeopleByTagColModel,
                caption     : '<%= t "reports-people-by-tag" %>',
                formTemplate : '#report-form-template'
            }));
        },
        
        edited_bios : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            $('#report-results-area').html('');
            
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : GenericForm,
                endPoint    : "<%= baseUri + '/planner_reports/edited_bios' %>",
                colModel    : PeopleBioColModel,
                caption     : '<%= t "reports-participant-bios" %>'
            }));
        }
        
    });
    
    /*
     * 
     */
    return {
        ReportBase : ReportBase,
        
        GenericForm : GenericForm,
        
        init : function(options) {
            new Workspace();
            
            $('#report-tabs').tabdrop({
                text : "..."
            });
        }
    }
    
})(Backbone);

/*
 * 
 */
jQuery(document).ready(function() {
    ReportApp.addInitializer(ReportApp.ReportManagement.init);
    ReportApp.start({});
});

</script>

<% @extra_javascript.each do |extra| %>
    <%= render extra %>
<% end %>
