<script type="text/javascript">
/*
 * 
 */
ScheduleApp = new Backbone.Marionette.Application();
ScheduleApp.ItemManagement = (function(Backbone){
    
    var eventAggregator = AppUtils.eventAggregator;
    
    /*
     * 
     */
    Room = Backbone.Model.extend({
    });
    
    RoomCollection = Backbone.Collection.extend({
        model : Room
    });
    
    /*
     * 
     */
    GridItem = Backbone.Model.extend({
    });
    
    // 
    
    Day = Backbone.Model.extend({
        defaults : {
            'currentDay' : 0
        }
    });
    
    /*
     * 
     */
    GridDayControlView = Marionette.ItemView.extend({
        el : '#grid-day-control-view',
        template : '#grid-day-control-view-template',
        
        events : {
            "click .prev-day"   : "prevDay",
            "click .next-day"    : "nextDay",
        },
        
        onRender: function() {
            $('.menu-link').bigSlide({
                push : '.slider',
                menuWidth : '33%'
            });
        },
        
        initialize : function() {
            eventAggregator.on("refreshConflicts", this.refreshConflicts, this);
        },
        
        refreshConflicts : function() {
            day = this.model.get('currentDay');
            loadConflicts(day);
        },

        prevDay : function() {
            day = this.model.get('currentDay');
            if (day > 0) {
                day -= 1;
                this.model.set('currentDay', day);
                this.render();
                _currentDay = day;
                loadGrid(day, roomList);
            }
        },
        
        nextDay : function() {
            day = this.model.get('currentDay');
            if (day < (<%= @start_date.number_of_days %> -1)) {
                day += 1;
                this.model.set('currentDay', day);
                this.render();
                _currentDay = day;
                loadGrid(day, roomList);
            }
        }
    });
    
    // The offsets for each day (in case there is a change to/from daylight savings)
    var _offsets = <%= (0..@start_date.number_of_days).collect{|d| {d => Time.zone.parse((@start_date.start_date + d.days + 4.hours).to_s).utc_offset/60} }.reduce(Hash.new, :merge).to_json.html_safe %>;
    
    /*
     * 
     */
    GridView = Marionette.ItemView.extend({
        el : '#grid-view',
        template : '#grid-view-template',
        
        initialize : function() {
        },
        
        onRender : function() {
            var thisView = this;
            var _containerElem = this.$el.find("#program-grid")[0];
            _day = this.options.day;
            var assignments = this.model;
            
            var nbrOfRooms = assignments.get('rooms').length;
            var gridWidth = (nbrOfRooms > ($("#program-grid").width() / 150)) ? $("#program-grid").width() : ((150 * nbrOfRooms) + 40);
            
            DailyGrid.paint(_containerElem, assignments, gridWidth, _offsets[_day]); // adjust in case of daylight savings ....
            
            // when an item is droped on the grid we need to
            // 1. create a new assignment (need the room and the time)
            // 1.a Save the new item on the server
            // 2. Add the item as a visual element to the grid
            // 3. Refresh the list of items on the left (i.e. remove dropped item from list)
            this.$el.find('#program-grid').droppable({
                drop: function(event, ui) {
                    setDropped( ui.draggable.find("div").attr('itemid') );
                }
            });
        },

    });
    
    /*
     * 
     */
    var roomList = [];
    RoomItemView = Marionette.ItemView.extend({
        template : '#room-filter-item-template',
        events  : {
            "click .room-select" : 'selectRoom'
        },
        
        selectRoom : function(ev) {
            var id = ev.currentTarget.value;
            if (ev.currentTarget.checked) {
                // add to list of rooms
                roomList.push(id); 
            } else {
                // remove from list of rooms
                var p = _.find(roomList, function(a) {
                    return (a == id);
                });
                var idx = _.indexOf(roomList, p);
                roomList.splice(idx,1);
            }
        }
    });
    
    RoomFilterView = Marionette.CompositeView.extend({
        el       : '#room-filter-menu',
        template : "#room-filter-menu-template",
        itemView : RoomItemView,
        itemViewContainer : "#item-filters",
        events   : {
            "click .apply-filter" : "applyFilter"
        },
        
        applyFilter : function(ev) {
            loadGrid(_currentDay, roomList);
        }
    });
    
    /*
     * 
     */
    var _gridView = null;
    var _itemId = null;
    var _day = null;
    var _currentDay = 0;
    
    function setDropped(itemId) {
        _itemId = itemId;
    };
    
    function getDropped() {
        var it = _itemId;
        _itemId = null;
        return it;
    };
    
    /*
     * 
     */
    function removeAssignment(_itemid, parent_group, obj) {
        var group = parent_group;
        // ask the user if they want to remove the item
        modal = new AppUtils.ConfirmModel({
                content : '<%= t "remove-item" %>' + ' ' + obj.title,
                title : '<%= t "unschedule-item-confirmation" %>',
                continueAction : function() {
                    $.ajax({
                        type: 'POST',
                        url: "<%= baseUri + '/program_planner/removeItem' %>",
                        data: {
                            itemid : _itemid,
                        },
                        success: function(response){
                            // And we reload the list of items so that the dropped one is removed
                            DailyGrid.remove_group(group)
                            $("#items").trigger("reloadGrid");
                            eventAggregator.trigger("refreshConflicts");
                            DailyGrid.enable_actions()
                        }
                    });
                },
                closeAction : function() {
                    DailyGrid.enable_actions()
                }
        });
        modal.render();
    };
    
    /*
     * Create a new assignment on the server 
     */
    function addAssignment() {
        var roomAndTime = DailyGrid.getCurrentRoomAndTime();
        var itemId = getDropped();
        
        if (itemId && roomAndTime && (typeof roomAndTime[0] != 'undefined')) {
            moveAssignment(itemId, roomAndTime[0].id, _day, roomAndTime[1], true, null, null);
        };
    };
    
    /*
     * 
     */
    function moveAssignment(itemId, roomId, day, time, addDisplay, obj, original) {
        var assignments = _gridView.model;
        var content = "";
        
        if (original) {
                content = '<%= t "move-item" %>' + ' ' + original.title + " " + '<%= t "to" %>' + " " + moment(time).utc().add('minute', _offsets[day]).format('HH:mm, dddd');
        } else {
                content = '<%= t "insert-item" %>' + ' ' + '<%= t "at" %>' + " " + moment(time).utc().add('minute', _offsets[day]).format('HH:mm, dddd');
        }
        
        modal = new AppUtils.ConfirmModel({
                content : content,
                title : '<%= t "move-item-confirmation" %>',
                continueAction : function() {
                    $.ajax({
                        type: 'POST',
                        url: "<%= baseUri + '/program_planner/addItem.json' %>",
                        data: {
                            day    : day,
                            itemid : itemId,
                            roomid : roomId,
                            time   : time
                        },
                        success: function(response){
                            // Once the item is created add it to the grid ...
                            // create the element in the grid
                            if (addDisplay) {
                                var idx = 0;
                                var rooms = assignments.get('rooms');
                                        
                                for (idx = 0; idx < rooms.length; idx++) {
                                    if (rooms[idx].id == roomId) {
                                        break;
                                    }
                                };
                                
                                if (obj) {
                                    DailyGrid.remove_group(obj.group)
                                }

                                if (idx < rooms.length) {
                                    DailyGrid.createItem(response, idx);
                                };
                            };
                            
                            // And we reload the list of items so that the dropped one is removed
                            $("#items").trigger("reloadGrid");
                            eventAggregator.trigger("refreshConflicts");
                            DailyGrid.enable_actions()
                        },
                        error : function(model, response) {
                            alertMessage("Error communicating with backend");
                            DailyGrid.enable_actions()
                        },
                    });                    
                    
                },
                closeAction : function() {
                    // we need the underlying item
                    if (obj && original) {
                        DailyGrid.returnObject(obj, original); // room and time
                    }
                    DailyGrid.enable_actions();
                }
        });
        modal.render();
    };
    
    /*
     * Given the day of the conference render the grid (SVG) for that day
     */
    function loadGrid(day, roomList) {
            showSpinner('#grid-view');
        
            var grid = new GridItem();
            if (roomList && roomList.length > 0) {
                grid.url = "<%= baseUri + '/program_planner/assignments.json?day=' %>" + day + "&rooms=" + roomList;
            } else {
                grid.url = "<%= baseUri + '/program_planner/assignments.json?day=' %>" + day;
            }
            grid.fetch({
                error : function(model, response) {
                    alertMessage("Error communicating with backend");
                },
                success : function(_grid) {
                    // if there was already a grid there we need to get rid of it.... check that this is the case
                    if (_gridView) {
                        DailyGrid.clean();
                    };
                    
                    _gridView = new GridView({
                        model : _grid,
                        day : day
                    });
                    _gridView.render();
                    
                    loadConflicts(day);
                }
            });
    };
    
    var conflictContent = [];

    function clearConflicts() {
        _.invoke(conflictContent, 'clear' );
    };

    /*
     * Create collection and view for the conflict(s)
     */
    function clearConflictHighlights(color) {
        // Clear the conflict highlights
        $(".conflict-item-" +color).each(function() {
            var cl = $(this).attr('class');

            cl = cl.replace('conflict-item-' + color,"");
            
            $(this).attr('class', cl);
        });
    };
    
    function highlightConflict(collection, color) {
        // Put in the conflict highlights
        _.each(collection.models, function(vv) {
            var id = vv.get('item_id');
            var cl = $("#" + id + " .prog-item-rect").attr('class');
            if (typeof cl != 'undefined') {
                if (cl.indexOf("conflict-item") == -1) {
                    $("#" + id + " .prog-item-rect").attr('class', cl + " conflict-item-" + color);
                }
            }
        });
    }
    
    /*
     * 
     */
    function loadConflicts(day) {
        conflictLayout = new AppUtils.ConflictLayout({
            template : "#conflict-layout-template"
        });
        conflictLayout.render();
        $('#conflict-view').html(conflictLayout.el);

        // Render the conflicts for this day
        conflicts = new AppUtils.Conflicts();
        conflicts.fetch({
            url : "<%= baseUri + '/program_planner/getConflicts.json?day=' %>" + day,
            success : function(obj) {
                // Create the views...
                clearConflictHighlights('red');
                clearConflictHighlights('blue');
                clearConflictHighlights('magenta');
                
                AppUtils.createConflictCollectionView(obj.get('schedule'), "#schedule-conflict-view-template",conflictLayout.scheduleRegion, '<%= baseUri %>');
                AppUtils.createConflictCollectionView(obj.get('room'), "#room-conflict-view-template",conflictLayout.roomRegion, '<%= baseUri %>');
                AppUtils.createConflictCollectionView(obj.get('excluded_item'), "#excluded-item-conflict-view-template",conflictLayout.excludedItemRegion, '<%= baseUri %>');
                AppUtils.createConflictCollectionView(obj.get('excluded_time'), "#excluded-time-conflict-view-template",conflictLayout.excludedTimeRegion, '<%= baseUri %>');
                AppUtils.createConflictCollectionView(obj.get('availability'), "#availability-conflict-view-template",conflictLayout.availabilityRegion, '<%= baseUri %>');
                AppUtils.createConflictCollectionView(obj.get('back_to_back'), "#back-to-back-conflict-view-template",conflictLayout.backToBackRegion, '<%= baseUri %>');
                
                highlightConflict(obj.get('schedule'), 'red')
                highlightConflict(obj.get('room'), 'red')
                highlightConflict(obj.get('excluded_item'), 'magenta')
                highlightConflict(obj.get('excluded_time'), 'magenta')
                highlightConflict(obj.get('availability'), 'magenta')
                highlightConflict(obj.get('back_to_back'), 'blue')
            } 
        });

    };
    
    /*
     * The 'public' methods
     */
    return {
        init : function() {
            var dayControl = new GridDayControlView({
                model : new Day()
            });
            dayControl.render();
            
            // get the data for the first day
            _currentDay = 0;
            loadGrid(0, roomList);
            
            rooms = new RoomCollection();
            
            rooms.fetch({
                url : "<%= baseUri + '/rooms.json' %>",
                success : function(mdl) {
                    var roomFilter = new RoomFilterView({
                        collection : mdl
                    });
                    roomFilter.render();
                }
            })
            
        },
        
        onItemLoad : function() {
            // make the cells of the item list draggable
            $('#items').find( ".ui-draggable" ).draggable({
                iframeFix: true,
                zIndex: 500,
                revert : true,     // return to origin if not dropped on droppable area
                helper : function(e) {
                    var $helper = $(this).find('div').clone();
                    $helper.addClass('schedule-item dragging');

                    return $helper;
                },   // clone for visual effect
                appendTo : 'body',
            });
        },
        
        addAssignment : function() {
            addAssignment();
        },
        
        moveAssignment : moveAssignment,
        
        removeAssignment : removeAssignment
    }
    
})(Backbone);

jQuery(document).ready(function() {
    moment.locale('<%= I18n.locale %>');

    ScheduleApp.start();
    ScheduleApp.ItemManagement.init();
});

</script>
