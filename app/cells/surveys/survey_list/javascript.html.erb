<script type="text/javascript">

SurveyApp = new Backbone.Marionette.Application();

SurveyApp.SurveyManagement = (function(Backbone){

    Survey = Backbone.DeepModel.extend({
        schema : {
            name            : { type : 'Text', title : '<%= t "name" %>', help: '<%= t 'survey-name-hint' %>', validators: ['required'] },
            alias           : { type : 'Text', title : '<%= t "survey-alias" %>', help: '<%= t 'survey-alias-hint' %>', validators: ['required'] },
            public          : { type : 'Checkbox', title : '<%= t "survey-public" %>', help: '<%= t 'survey-public-hint' %>' },
            authenticate    : { type : 'Checkbox', title : '<%= t "survey-authenticate" %>', help: '<%= t 'survey-authenticate-hint' %>' },
            use_captcha     : { type : 'Checkbox', title : '<%= t "survey-use-captcha" %>', help: '<%= t 'survey-use-captcha-hint' %>' },
            anonymous       : { type : 'Checkbox', title : '<%= t "survey-anonymous" %>', help: '<%= t 'survey-anonymous-hint' %>',
                                    validators: [
                                        function check_for_auth(value, formValues) {
                                            var err = {
                                                type: "anonymous",
                                                message: '<%= t "authenticated-survey-can-not-be-anonymous" %>'
                                            };
                                            if ((formValues.authenticate != "") && value) {
                                                return err;
                                            }
                                        }
                                    ]
                                 },
            authenticate_msg : { type : 'DependentHtml', title : '<%= t "survey-authentication-intro" %>',
                                        dependsOn : 'authenticate', dependentValues : ['true'], help: '<%= t 'survey-authenticate-msg-hint' %>' },
            welcome         : { type : 'Html', title : '<%= t "survey-welcome-message" %>', help: '<%= t 'survey-welcome-msg-hint' %>' },
            thank_you       : { type : 'Html', title : '<%= t "survey-thank-you-message" %>', help: '<%= t 'survey-thank-you-msg-hint' %>' },
            declined_msg    : { type : 'DependentHtml', title : '<%= t "survey-declined-message" %>', help: '<%= t 'survey-decline-msg-hint' %>',
                                        dependsOn : 'authenticate', dependentValues : ['true'] },
            submit_string   : { type : 'Text', title : '<%= t "survey-submit-string" %>', help: '<%= t 'survey-submit-string-hint' %>' },
            header_image    : { type : 'Text', title : '<%= t "survey-url-for-header-image" %>', validators: ['url'], help: '<%= t 'survey-url-for-header-hint' %>' },
            accept_status_id : { type : 'DependentSelect', title : '<%= t "acceptance-status-on-submit-to" %>', help: '<%= t 'survey-acceptance-status-hint' %>',
                                            options : <%= [''].concat(AcceptanceStatus.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %>,
                                        dependsOn : 'authenticate', dependentValues : ['true'] },
            decline_status_id : { type : 'DependentSelect', title : '<%= t "acceptance-status-on-decline-to" %>', help: '<%= t 'survey-decline-status-hint' %>',
                                            options : <%= [''].concat(AcceptanceStatus.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %>,
                                        dependsOn : 'authenticate', dependentValues : ['true'] }
        },
        defaults: {
            submit_string: 'Submit',
            thank_you: 'Thank you for filling out this survey.',
            authenticate_msg: "You're invited to participate in this event!",
            welcome: "Welcome to this survey. Please take a few minutes to answer the questions below.",
            declined_msg: "If you change your mind at a later time, you can come back and click on the same link to fill in your answers."
        },
        urlRoot : "<%= baseUri + '/surveys' %>"
    });

    SurveyCollection = Backbone.Collection.extend({
        model : Survey
    });
    
    SurveyLayout = Backbone.Marionette.Layout.extend({
        template: "#survey-list-layout-template",
        
        regions : {
            surveyControlRegion: "#survey-control-div",
            surveyRegion: "#survey-region-div",
        },
    });
    
    var tabLists = [];
    
    function clearDetails() {
        _.invoke(tabLists, 'reset' );
    };

    function showSurveys() {
        surveyLayout = new SurveyLayout();
        surveyLayout.render();
        $('#survey-region-view').html(surveyLayout.el);
        
        TabUtils.createTabControl({
            template                : "#survey-control-template",
            modelType               : Survey,
            view_refresh_event      : "survey:refresh",
            modal_create_title      : '<%= t "create-survey" %>',
            region                  : surveyLayout.surveyControlRegion,
        });
        
        tabLists.push( AppUtils.createCollectionView({
            url                     : "<%= baseUri + '/surveys/list.json' %>",
            collectionType          : SurveyCollection,
            region                  : surveyLayout.surveyRegion,
            template                : "#survey-template",
            collection_attributes   : { "class" : "table table-condensed" },
            collection_tagName      : 'table',
            tagName                 : 'tr',
            view_refresh_event      : "survey:refresh",
            drillDownFn             : drillDownSurvey,
            selectFn                : selectSurvey,
            previewFn               : previewSurvey,
            readTemplate            : '#survey-data-template',
            itemArea                : "#survey-edit-area"
        }) );

        $('.bpopover').popover({
            html: true,
            trigger: 'hover'
        });

    };
    
    function previewSurvey(mdl) {
        // mechanism to preview survey in a new window...
        window.open("<%= baseUri %>/form/" + mdl.get('alias') + '/preview', mdl.get('alias') + "-survey-preview");
    };
    
    function drillDownSurvey(id) {
        <%= @drillDownNotifyMethod %>(id);
    };
    
    function selectSurvey(id) {
        <%= @selectNotifyMethod %>(id);
    };

    /*
     * 
     */
    return {
        init : function() {
            showSurveys();
        },
        
        clearDetails : function() {
        },
        
        selectSurvey : function(id) {
            SurveyGroupApp.SurveyGroupManagement.clearDetails();
            SurveyQuestionApp.SurveyQuestionManagement.clearDetails();
        }
    }

})(Backbone);

/*
 * 
 */
jQuery(document).ready(function() {
    SurveyApp.start();
    SurveyApp.SurveyManagement.init();
});

</script>

