<script type="text/javascript">

SurveyQuestionApp = new Backbone.Marionette.Application();

SurveyQuestionApp.SurveyQuestionManagement = (function(Backbone){
    
    Backbone.Form.editors.List.Modal.ModalAdapter = Backbone.BootstrapModal;

    SurveyQuestion = Backbone.DeepModel.extend({
        schema : {
            question            : { type : 'Html', title : '<%= t "survey-question" %>', validators: ['required'], help: '<%= t 'survey-question-help' %>' },
            //title               : { type : 'Text', title : '<%= t "title" %>' }, // TODO - is this used???
            sort_order          : { type : 'Number', title : '<%= t "sort_order" %>', help: '<%= t "sort_order-help" %>', validators: ['number', /^[0-9]\d*$/] },
            question_type       : { 
                type : 'Select', 
                title : '<%= t "survey-question-type" %>', 
                help: '<%= t "survey-question-type-help" %>',
                options : [
                    { label : '<%= j(t('select-a-type')) %>', val : null },
                    { label : '<%= j(t('text-field')) %>', val : 'textfield' },
                    { label : '<%= j(t('text-box')) %>', val : 'textbox' },
                    { label : '<%= j(t('single-choice')) %>', val : 'singlechoice' },
                    { label : '<%= j(t('multiple-choice')) %>', val : 'multiplechoice' },
                    { label : '<%= j(t('selection-box')) %>', val : 'selectionbox' },
                    { label : '<%= j(t('availability')) %>', val : 'availability' },
                    { label : '<%= j(t('address')) %>', val : 'address' },
                    { label : '<%= j(t('phone')) %>', val : 'phone' },
                    { label : '<%= j(t('photo')) %>', val : 'photo' },
                ],
                validators : ['required']
            },
            text_size           : { type : 'DependentNumber',  title : '<%= t "survey-length-of-textbox" %>', help: '<%= t 'survey-text-size-hint' %>',
                                    dependsOn : 'question_type', dependentValues : ['textfield', 'textbox'] , validators: ['number', /^[0-9]\d*$/]},        
            mandatory           : { type : 'Checkbox', title : '<%= t "survey-mandatory" %>', help: '<%= t 'survey-mandatory-question-hint' %>' },
            private             : { type : 'Checkbox', title : '<%= t "survey-private" %>', help: '<%= t "survey-private-help" %>' },
            tags_label          : { type : 'DependentText', title : '<%= t "tags_label" %>', help: '<%= t 'survey-tag-label-hint' %>',
                                    validators : [ /^[A-z0-9_]*$/ ], help: '<%= t "tags_label-help" %>',
                                    dependsOn : 'question_type', dependentValues : ['textfield'] },

            questionmapping_id  : { type : 'Select', 
                                    title : '<%= t "question-mapping" %>', 
                                    options : <%= [[' ',' ']].concat(QuestionMapping.all.to_a.collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %>,
                                    help: '<%= t "question-mapping-help" %>' },
            isbio               : { type : 'DependentCheckbox', title : '<%= t "isbio" %>',
                                     dependsOn : 'question_type', dependentValues : ['textbox'] , help: '<%= t "isbio-help" %>' }, // only if the question type is text
            horizontal          : { type : 'DependentCheckbox', title : '<%= t "survey-horizontal-layout" %>', help: '<%= t 'survey-horizontal-layout-hint' %>',
                                    dependsOn : 'question_type', dependentValues : ['multiplechoice', 'singlechoice'] },
            'survey_format.help' : { type :'Html', title : '<%= t "help-text" %>', help: '<%= t 'survey-help-text-help' %>' }, // Just need the help text...
            // nested answers object - only if the type is appropriate
            survey_answers      : { type : 'DependentList',
                title : '<%= t "survey_answers" %>',
                itemToString : function(item) {
                    return _.template($('#answer-data-template').html(), item);
                },
                dependsOn : 'question_type', dependentValues : ['multiplechoice', 'singlechoice', 'selectionbox'],
                itemType : 'Object',
                
                subSchema : {
                    id : { type : 'Hidden' },
                    answer : { type : 'Text', help: '<%= t 'answer-help' %>', help_placement: "bottom" },
                    sort_order : { type : 'Number', title : '<%= t "sort-order" %>', help: '<%= t 'sort_order-help' %>', help_placement: "bottom" },
                    // default ?
                    answertype_id : { type : 'Select', 
                                       title : '<%= t "survey-answer-type" %>', help: '<%= t 'survey-question-answer-type-hint' %>',
                                       options : <%= [].concat(AnswerType.all.to_a.collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %> },
                    start_day : { type : 'DependentSelect', title : '<%= t "start day" %>', help: '<%= t 'survey-question-start-day-hint' %>', options : <%=  ([[' ','-1']].concat((0..((@start_date.number_of_days).to_i-1)).to_a.collect{ |r| [ (Time.zone.parse(@start_date.start_date.to_s) + r.days).strftime('%A'), r] })).collect {|i,l| {'val' => l, 'label' => i}}.to_json.html_safe%>,
                     dependsOn : 'answertype_id', dependentValues : ['<%= AnswerType["TimeConflict"].id %>', '<%= AnswerType["AvailableTime"].id %>'] },
                    start_time : { type : 'DependentTime', title : '<%= t "item-start-time" %>', help: '<%= t 'survey-question-start-time-hint' %>',
                     dependsOn : 'answertype_id', dependentValues : ['<%= AnswerType["TimeConflict"].id %>', '<%= AnswerType["AvailableTime"].id %>'] },
                    duration : { type : 'DependentNumber', title : '<%= t "duration-minutes" %>', help: '<%= t 'survey-question-duration-hint' %>',
                     dependsOn : 'answertype_id', dependentValues : ['<%= AnswerType["TimeConflict"].id %>', '<%= AnswerType["AvailableTime"].id %>'] },
                }
            } 
        },
        defaults: {
            text_size: 5,
        }
    });
    
    SurveyQuestionCollection = Backbone.Collection.extend({
        model : SurveyQuestion
    });
    
    SurveyQuestionLayout = Backbone.Marionette.Layout.extend({
        template: "#survey-question-list-layout-template",
        
        regions : {
            surveyQuestionControlRegion: "#survey-question-control-div",
            surveyQuestionRegion: "#survey-question-region-div",
        },
    });
    
    var tabLists = [];
    
    function clearDetails() {
        _.invoke(tabLists, 'reset' ); //????
    };

    function showQuestions(sid, gid) {
        surveyQuestionLayout = new SurveyQuestionLayout();
        surveyQuestionLayout.render();
        $('#survey-question-region-view').html(surveyQuestionLayout.el);
        
        TabUtils.createTabControl({
            template : "#survey-question-control-template",
            modelType : SurveyQuestion,
            view_refresh_event : "survey-question:refresh",
            modal_create_title : '<%= t "survey-create-question" %>',
            region : surveyQuestionLayout.surveyQuestionControlRegion,
            modelURL : "<%= baseUri + '/surveys/' %>" + sid + "/survey_groups/" + gid + "/survey_questions"
        });
        
        tabLists.push( AppUtils.createCollectionView({
            url                     : "<%= baseUri + '/surveys/' %>" + sid + "/survey_groups/" + gid + "/survey_questions.json",
            modelURL                : "<%= baseUri + '/surveys/' %>" + sid + "/survey_groups/" + gid + "/survey_questions",
            collectionType          : SurveyQuestionCollection,
            region                  : surveyQuestionLayout.surveyQuestionRegion,
            template                : "#survey-question-template",
            collection_attributes   : { "class" : "table table-condensed table-hover" },
            collection_tagName      : 'table',
            tagName                 : 'tr',
            view_refresh_event      : "survey-question:refresh",
            selectFn                : selectQuestion,
            readTemplate            : '#question-data-template', // Add a composite view in here
            itemArea                : "#survey-edit-area"
        }) );

        $('.bpopover').popover({
            html: true,
            trigger: 'hover'
        });
    };
    
    function selectQuestion(id) {
        <%= @selectNotifyMethod %>(id);
    };
    
    var answerTypes = <%= Hash[AnswerType.all.to_a.map { |a| [a.id.to_s, a.name.to_s] }].to_json.html_safe %>;
    var dayStrings = <%=  Hash[[[-1,'&nbsp;']].concat((0..((@start_date.number_of_days).to_i-1)).to_a.map{ |r| [r.to_s, (Time.zone.parse(@start_date.start_date.to_s) + r.days).strftime('%A')]})].to_json.html_safe %>
    
    return {
        init : function() {
        },
        
        showQuestions : function(sid, gid) {
            showQuestions(sid, gid);
        },
        
        clearDetails : function() {
            clearDetails();
        },
        
        selectQuestion : function(id) {
            selectQuestion(id);
        },
        
        convertAnswerTypeIdToString : function(id) {
            return answerTypes[id];
        },
        convertDayIdToString : function(id) {
            console.debug(dayStrings);
            if (dayStrings.hasOwnProperty(id)) {
                return dayStrings[id];
            } else {
                return -1;
            }
        }
    }

})(Backbone);

jQuery(document).ready(function() {
    SurveyQuestionApp.start();
    SurveyQuestionApp.SurveyQuestionManagement.init();
});

</script>
