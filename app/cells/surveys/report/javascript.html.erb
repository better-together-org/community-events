<script type="text/javascript">

SurveyReportApp = new Backbone.Marionette.Application();

SurveyReportApp.SurveyReport = (function(Backbone){
    
    Backbone.Form.editors.List.Modal.ModalAdapter = Backbone.BootstrapModal;
    
    // TODO - we should only be able to edit the queries that belong to us....
    Query = Backbone.DeepModel.extend({
        urlRoot : "<%= baseUri + '/survey_query' %>",
        schema : {
            name            : { type : 'Text',      title : '<%= t "name" %>',  validators: ['required'], help: '<%= t "survey-query-name-hint" %>' },
            survey_id       : { type : 'Select',    title : '<%= t "survey" %>', help: '<%= t "survey-select-hint" %>',
                                options : <%= [].concat(Survey.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %>,
                                validators: ['required']
                              },
            shared          : { type : 'Checkbox',  title : '<%= t "survey-shared" %>', help: '<%= t "survey-shared-hint" %>' },
            show_country    : { type : 'Checkbox',  title : '<%= t "survey-show-country" %>', help: '<%= t "survey-show-country-hint" %>' },
            date_order      : { type : 'Checkbox',   title : '<%= t "survey-order-by-date-received" %>', help: '<%= t "survey-order-by-date-received-hint" %>' },
            //operation       : { type : 'Select',    title : '<%= t "survey-operation" %>', help: '<%= t "survey-operation-hint" %>',
            //                    options : ['ANY'] //, 'ALL']
            //                  },
            // Predicate list
            survey_query_predicates : {
                title : '<%= t "survey-query-predicates" %>',
                help: '<%= t "survey-query-predicates-hint" %>',
                type : 'List',
                itemToString : function(item) {
                    return _.template($('#predicate-data-template').html(), { item : item, question : getQuestionById(item.survey_question_id) }); // TODO
                },
                itemType : 'Object',
                subSchema : {
                    // survey_question_type : { type : 'Hidden' },
                    survey_question_id   : { type : 'Select',
                                            help: '<%= t "survey-question-hint" %>', help_placement: 'bottom',
                                            title : '<%= t "survey-question" %>',
                                            options : function(callback, editor) { // Get a list of the questions for this survey
                                                var res = [];
                                                
                                                _.each(currentQuestions.models, function(element) {
                                                    res.push( { val : element.get('id'), label : element.get('question') } );
                                                });
                                                
                                                callback( res );
                                                // when the value changes we need to re-render the operation field...
                                                // i.e. form.fields.foo.render() on the change event item:<event>
                                            }
                                },
                    // Each question has a type... each type uses a different operation...
                    operation            : { type : 'DependentValueSelect', 
                                            title : '<%= t "operation" %>',
                                            help: '<%= t "operation-hint" %>',
                                            dependsOn : 'survey_question_id',
                                            options: function(callback, editor) { // For the question return the valid operations ...
                                                var question_id = editor.form.fields['survey_question_id'].editor.getValue();
                                                var ops = [""];
                                                
                                                // find the type an from that pick the valid options for selection
                                                _.each(currentQuestions.models, function(element) {
                                                    if (element.get('id') == question_id) {
                                                        if ($.inArray(element.get('question_type'), ['singlechoice', 'multiplechoice', 'selectionbox']) > -1) {
                                                            ops = ["", "is", "is not", "answered", "not answered"]; 
                                                        } else {
                                                            ops = ["", "contains", "does not contain", "answered", "not answered"];
                                                        }
                                                    }
                                                });
                                                                                                
                                                callback(ops);
                                            }
                                },
                    value                : { type : 'DependentValueSelect', dependsOn : 'operation', dependentValues : ['is', 'is not'], altField : 'Text',
                                             title : '<%= t "survey-value" %>',
                                             help: '<%= t "survey-value-hint" %>',
                                             options : function(callback, editor) {
                                                var question_id = editor.form.fields['survey_question_id'].editor.getValue();
                                                var ops = [{val : "", label :""}];
                                                 
                                                // find the type an from that pick the valid options for selection
                                                _.each(currentQuestions.models, function(element) {
                                                    if (element.get('id') == question_id) {
                                                        var answers = element.get('survey_answers');
                                                        _.each(answers, function(ans) {
                                                            ops.push({val : _.escape(ans.answer), label : ans.answer});
                                                        });
                                                    }
                                                });
                                                
                                                callback(ops);
                                             }
                                            }
                }
            }
        },

        validate: function(attrs, options) {
            var err = {};
            err.survey_query_predicates = '<%= t "at-least-one-predicate-needed" %>';
            
            if (attrs.survey_query_predicates.length == 0) {
                return err;
            }
        },
    });

    Question = Backbone.Model.extend({
    });

    QuestionsCollection = Backbone.Collection.extend({
        model   : Question,
        url     : "<%= baseUri + '/survey_reports/questions' %>"
    });
    
    ResultSet = Backbone.RelationalModel.extend({
        url : "<%= baseUri + '/survey_reports/runReport' %>",
        
        relations : [{
            type : Backbone.HasMany,
            key : 'rowdata',
            relatedModel : 'ResultRow',
            collectionType : 'ResultRowCollection',
        }],

    });

    ResultsView = Backbone.View.extend({
        tagName : 'div',

        render : function() {
            var colModel = [ 
                    {name:'First Name', jsonmap: "first_name", sortable:true, width: 20}, 
                    {name:'Last Name', jsonmap: "last_name", sortable:true, width: 30},
                    {name:'Email', jsonmap: "email", sortable:true, width: 35}, 
                    {name:'Organization', jsonmap: "company", sortable:true, width: 35}, 
                    {name:'Date Filled', jsonmap: "filled_at", sortable:true, sorttype: function(cell, obj) {
                        var d = moment(cell);
                        return d.valueOf();
                    }, width: 35}, // 03:25 PM, 14 May 2013
                ];
                
            if (this.resultsCollection.get('show_country')) {
                colModel.push( 
                    {name:'Country', jsonmap: "country", sortable:true, width: 35} 
                    );
            };
                
            for (var key in this.resultsCollection.get('userdata')) {
                colModel.push( {name: stripHtml(this.resultsCollection.get('userdata')[key]['question']), jsonmap: key, cellattr: function (rowId, tv, rawObject, cm, rdata) { return 'style="white-space: pre-wrap;"' } } );
            };

            this.$el.html(_.template($('#query-results-template').html()));
            $('#query-results').html(this.$el);
            
            this.grid = $('.result-table').jqGrid({
                colModel : colModel,
                datatype: 'jsonstring',
                loadonce: true,
                datastr: this.resultsCollection.toJSON(),
                jsonReader :{
                    repeatitems : false,
                    page: "currpage",
                    records: "totalrecords",
                    root : "rowdata",
                    total: "totalpages",
                    id : "id",
                },
                sortname: 'last_name',
                sortorder: "asc",
                viewrecords: true,
                height: "auto",
                autowidth: true,
                ignoreCase: true,
                gridview: true,
                pager : '#result-pager',
                caption: 'Results',
                rowList:[10,20,50,100000000],
                loadComplete: function() {
                    $("option[value=100000000]").text('All');
                }
            });
            
            $('.result-table').jqGrid('filterToolbar',{stringResult: true, searchOnEnter : false, defaultSearch : 'cn'});
            
            var grid = this.grid;
            jQuery(window).bind('resize', function() {
                var width = grid.parents('.ui-jqgrid').parent().width();
                // console.debug(grid.parents('.ui-jqgrid').parent());
                // console.debug(width);
                grid.setGridWidth(width);
                grid.parents('.ui-jqgrid').css("width", width+2);
            }).trigger('resize');

            
            return this;
        },

        initialize : function() {
        },
    });
       
    var tabContent = [];
    var resultsView = null;
    var currentQuestions = null;
    
    function getQuestionById(id) {
        var result = '';
        // from the current questions
        _.each(currentQuestions.models, function(element) {
            if (element.get('id') == id) {
                result = element.get('question');
            }
        });
        
        return result;
    };
    
    function clearDetails() {
        if (resultsView) {
            resultsView.remove();
            resultsView = null;
        }
    };
    
    function runCSVQuery(id) {
        $.download("<%= baseUri + '/survey_reports/runReport.csv' %>", 'query_id=' + id );
    };
    
    function runQuery(id) {
            resultSet = new ResultSet();
            resultSet.fetch({
                type : 'POST',
                data : 'query_id=' + id,
                error : function(model, response) {
                  alertMessage("ERROR: unable to get the result from the server");
                },
                success : function(model) {
                    // alert("We have a result")
                    if (resultsView) {
                        resultsView.resultsCollection = model;
                    } else {
                        resultsView = new ResultsView({});
                        resultsView.resultsCollection = model;
                    }
                    resultsView.render();
                }
            })
        
    };
    
    function setCurrentQuestions(id) {
        currentQuestions.url = "<%= baseUri + '/survey_query/questions?survey_query=' %>" + id;
        currentQuestions.fetch({ async:false });
    };
    
    function setCurrentQuestionsBySurvey(id) {
        currentQuestions.url = "<%= baseUri + '/survey_query/questions?survey=' %>" + id;
        currentQuestions.fetch({ async:false });
    };

    function showQuery(id) {
        // Get the list of possible questions ...
        setCurrentQuestions(id);
        
        tabContent.push( TabUtils.createTabContent({
            modelType : Query,
            url : "<%= baseUri + '/survey_query/' %>" + id,
            modelURL                : "<%= baseUri + '/survey_query/' %>" + id,
            template : '#query-view-template',
            place :'#query-view',
            editTitle : "Edit Query",
            selectFn  : runQuery,
            selectCsvFn : runCSVQuery,
            clearFn   : clearDetails,
            view_refresh_event : "query:refresh",
            deleteTitle : '<%= I18n.t "delete-confirmation" %> ',
            deleteMessage : '<%= (I18n.t "confirm-that-you-really-want-to-delete").html_safe %>',
            form_event : 'survey_id:change',
            form_event_fn : function(form, editor, extra) { // TODO - This is not used when it is a new query because we do not have a query shown
                // Get the current set of questions
                currentQuestions.url = "<%= baseUri + '/survey_query/questions?survey=' %>" + editor.getValue();
                currentQuestions.fetch({ async:false });
                // we need to clear the predicates ...
                _.invoke(form.fields.survey_query_predicates.editor.items, 'remove');
                // we need to also remove the data from the editor
                var len = form.fields.survey_query_predicates.editor.items.length;
                form.fields.survey_query_predicates.editor.items.splice(0, len);
            }
        }) );
    };
    
    function setQuestions(form, editor, extra) {
        currentQuestions = new QuestionsCollection(); 
                // Get the current set of questions
                currentQuestions.url = "<%= baseUri + '/survey_query/questions?survey=' %>" + editor.getValue();
                currentQuestions.fetch({ async:false });
                // we need to clear the predicates ...
                _.invoke(form.fields.survey_query_predicates.editor.items, 'remove');
                // we need to also remove the data from the editor
                var len = form.fields.survey_query_predicates.editor.items.length;
                form.fields.survey_query_predicates.editor.items.splice(0, len);
    };
    
    return {
        init : function() {
            // showQueries();
            currentQuestions = new QuestionsCollection();
            <% if Survey.find(:first) %>
                setCurrentQuestionsBySurvey(<%= Survey.find(:first).id %>);
            <% end %>
        },
        
        clearDetails : function() {
            clearDetails();
        },
        
        selectQuery : function(id) {
            showQuery(id);
            clearDetails();
        },
        
        setQuestions : setQuestions
    }

})(Backbone);

/*
 * 
 */
jQuery(document).ready(function() {
    SurveyReportApp.start();
    SurveyReportApp.SurveyReport.init();
});

</script>
