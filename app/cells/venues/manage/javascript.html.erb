<script type="text/javascript">

VenueApp = new Backbone.Marionette.Application();

VenueApp.VenueManagement = (function(Backbone){
    var selectCallbacks = $.Callbacks();
    var selectVenueCallbacks = $.Callbacks();

    var current_room_id = current_venue_id = 0;

    Venue = Backbone.DeepModel.extend({
        schema : {
            name : { type : 'Text', title : '<%= t "name" %>' },
            sort_order : { type : 'Number', title : '<%= t "sort-order" %>' },
            postal_address : { type : 'Object',
                subSchema : {
                    line1   : { type : 'Text', title : '<%= t "line1" %>' },
                    city : { type : 'Text', title : '<%= t "city" %>' },
                    state : { type : 'Text', title : '<%= t "state" %>' },
                    postcode : { type : 'Text', title : '<%= t "post-code" %>' },
                    country : { type : 'Text', title : '<%= t "country" %>' }
                }
            }
        },
        urlRoot : "<%= baseUri + '/venue' %>"
    });

    Room = Backbone.Model.extend({
        schema : {
            name : { type : 'Text', title : '<%= t "name" %>' },
            purpose : { type : 'Text', title : '<%= t "purpose" %>' },
            comment : { type : 'Text', title : '<%= t "comments" %>' },
            sort_order : { type : 'Number', title : '<%= t "sort-order" %>' },
        },
        urlRoot : "<%= baseUri + '/rooms' %>"
    });

    RoomSetup = Backbone.Model.extend({
        schema : {
            setup_type_id : { type : 'Select', title : '<%= t "setup-type" %>', options : <%= SetupType.find(:all, :order => 'name asc').collect {|s| {'val' => s.id, 'label' => s.name} }.to_json.html_safe %> },
            capacity : { type : 'Number', title : '<%= t "capacity" %>' },
            isdefault : { type : 'Checkbox', title : '<%= t "default" %>' }, // This needs to be calculated
        },
        urlRoot : "<%= baseUri + '/room_setups' %>"
    });

    RoomSetupCollection = Backbone.Collection.extend({
        model : RoomSetup
    });

    RoomSetupLayout = Backbone.Marionette.Layout.extend({ // TODO
        template: "#room-setup-layout-template",

        regions : {
            roomSetupControlRegion: "#room-setup-control-div",
            roomSetupRegion: "#room-setup-region-div",
        },
    });


    ListControlView = Backbone.Marionette.ItemView.extend({
        events : {
            "click .add-button"       : "addItem",
            "click .remove-button"    : "removeItem",
        },

        initialize : function(options) {
            this.options = options || {};
            this.template = _.template($('#controls-template').html());
        },

        addItem : function() {
            if (this.options.form) {
                form = this.options.form;
                endPoint = this.options.endPoint
                refreshFn = this.options.refresh
                var modal = new AppUtils.FormModal({
                    form: form,
                    endPoint: endPoint,
                    refresh : refreshFn
                });
                modal.render();
            }
        },

        removeItem : function() {
            if (this.options.removeFn) {
                this.options.removeFn();
            }
        }
    });


    var tabLists = [];
    var tabControls = [];

    function clearDetails() {
        _.invoke(tabLists, 'reset' );
        _.invoke(tabControls, 'close' );
    };

    var roomSetupLayout = null;
    function showSetups(id) {
        // need to get the room
        var theRoom = new Room({ id : id});
        theRoom.fetch({ sync : true });

        roomSetupLayout = new RoomSetupLayout();
        roomSetupLayout.render();
        $('#room-setup-view').html(roomSetupLayout.el);
         tabControls.push( TabUtils.createTabControl({
            template : "#room-setup-control-template",
            modelType : RoomSetup,
            id : id, // need to pass in the name of the id field
            id_name : 'room_id',
            view_refresh_event : "room-setup:refresh",
            modal_create_title : '<%= t "create-room-setup" %>',
            region : roomSetupLayout.roomSetupControlRegion,
            callback : function(mdl) {
                showSetups(id);
                $("#room-list").roomsTable("render");
            }
        }) );

        tabLists.push( TabUtils.createTabListContent({
            collectionType : RoomSetupCollection,
            url : "<%= baseUri + '/room_setups/list.json?room_id=' %>"+ id,
            template : "#room-setup-template",
            view_refresh_event : "room-setup:refresh",
            region : roomSetupLayout.roomSetupRegion,
            newTitle : '<%= t "create-room-setup" %>',
            editTitle : '<%= t "edit-room-setup" %>',
            updateCallback : function(mdl) {
                showSetups(id);
                $("#room-list").roomsTable("render");
            }
        }) );

        selectCallbacks.fire({
            id : id,
            model : theRoom
        });

        return theRoom;
    };

    /*
     *
     */
    function make_sortable (the_table, callback) {
        $(the_table).sortable({
            items: '.item',
            cursor: 'move',
            handle : '.grippy',
            axis: 'y',
            update : function(e, ui) {
                item_id = ui.item.data('item-id');
                position = ui.item.index();
                base = ui.item.data('item-base');
                callback(item_id, position, base);
            }
        });
    };

    return {
        Venue : Venue,
        Room : Room,

        addSelectCallback : function(func) {
            selectCallbacks.add(func);
        },

        addSelectVenueCallback : function(func) {
            selectVenueCallbacks.add(func);
        },

        init : function() {
            make_sortable('#venue-list', function(item_id, position, base) {
                posn = position + base;
                $.ajax({
                    url : "<%= baseUri %>/venue/update_row_order",
                    type : 'POST',
                    data : {
                        venue_id : item_id,
                        venue_order_position : posn
                    },
                    success : function() {
                        $("#venue-list").roomsTable("unSelect");
                        $("#venue-list").roomsTable("refresh");
                        //$("#venue-list").venuesTable("render");
                     }
                });
            });
        },

        showSetups : function(id) {
            return showSetups(id);
        },

        clearDetails : function() {
            clearDetails();
        },

        selectRoom : function(id) {
            clearDetails();

            mdl = new Room({ id: id });
            mdl.fetch({
               async:false
            });
            current_room_id = id;

            showSetups(id);

            return mdl;
        },

        selectVenue : function(id) {
            mdl = new Venue({ id: id });
            mdl.fetch({
               async:false,
            });

            current_venue_id = id;

            $("#room-list").roomsTable({ extraClause : "venue="+id });
            $("#room-list").roomsTable("render");
            $("#room-list").roomsTable("setControlOptions", {
                id : id,
                id_name : 'venue_id'
            });
            make_sortable('#room-list', function(item_id, position, base) {
                posn = position + base;
                $.ajax({
                    url : "<%= baseUri %>/rooms/update_row_order",
                    type : 'POST',
                    data : {
                        room_id : item_id,
                        room_order_position : posn // TODO
                    },
                    success : function() {
                        $("#room-list").roomsTable("unSelect");
                        $("#room-list").roomsTable("refresh");
                     }
                });
            });

            if (roomSetupLayout) {
                roomSetupLayout.roomSetupControlRegion.close();
                roomSetupLayout.roomSetupRegion.close();
            }

            selectVenueCallbacks.fire({
                id : id,
                model : mdl
            });

            return mdl;
        }
    }

})(Backbone);

jQuery(document).ready(function() {
    VenueApp.addInitializer(VenueApp.VenueManagement.init);
    VenueApp.start();
});

</script>

<% if @extra_javascript %>
<% @extra_javascript.each do |extra| %>
    <%= render extra %>
<% end %>
<% end %>

