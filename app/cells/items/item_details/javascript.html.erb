<%= render_cell "theme_management", :javascript %>

<script type="text/javascript">

function showShortDescriptionDiv(el) {
    target = jQuery(el).closest(".form-horizontal").find('#short-versions-div');
    if (target.is(":visible")) {
        target.hide();
    } else {
        target.show();
    }
};

function set_theme(mdl, arg) {
    if (mdl) {
        var el = $("[name='theme_name_ids']");
        var data = el.select2('data');
        data.push({'id' : mdl.id, 'text' : mdl.get('name')});
        el.select2('data',data);
        el.select2('close');
    }
};

function toggleItemExtras(el) {
    if (!jQuery('input[name="is_break"]').is(":checked")){
        $extras = jQuery("#programme-item-extras");
        $el = jQuery(el);
        if ($extras.length > 0){
            $extras.toggle();
            if ($extras.is(":visible")){
                $el.removeClass("fa-plus-square");
                $el.addClass("fa-minus-square");
            } else {
                $el.removeClass("fa-minus-square");
                $el.addClass("fa-plus-square");
            }
        }
    }
};

ItemApp = new Backbone.Marionette.Application();

ItemApp.ItemManagement = (function(Backbone){
    var eventAggregator = AppUtils.eventAggregator;
    var selectCallbacks = $.Callbacks();
    var current_item = null;

    Picture = Backbone.RelationalModel.extend({
        schema : {
            picture : { 
                type : 'CloudImage', 
                title : 'Image',
                validators: [{
                    type: 'required',
                    message: '<%= I18n.t("you-have-not-uploaded-an-image") %>'   
                }],
                cl_args : {
                          client_allowed_formats: ["png","gif","jpeg","jpg"],
                          max_file_size: (4.5 * 1024 * 1024), // 4.5Mb
                          button_caption: '<%= I18n.t("upload-image") %>'
                }
            }
        },
        urlRoot : "<%= baseUri + '/external_images/ProgrammeItem' %>",
        cropping_aspect_ratio : function() {
            var card_size = this.get('use');
            if (card_size == 'mediumcard') {
                return 1;
            } else if (card_size == 'largecard') {
                return 736/264;
            }
            return null;
        }
    });
    PictureCollection = Backbone.Collection.extend({
        model : Picture
    });

    /*
     * 
     */
    ProgramItem = Backbone.RelationalModel.extend({
        schema : {
            title       : { type : 'Text', title : '<%= t "title" %>', validators: ['required'] },
            theme_name_ids  : { type : 'DependentSelect2', title : '<%= t "themes" %>', fieldClass : 'item-theme',
                                editorAttrs : { placeholder : '<%= t "select-a-theme-for-this-item" %>' },
                                dependsOn : 'is_break', dependentValues : ['false'],
                                        config : {
                                            multiple: true,
                                            initSelection : function(element,callback) {
                                                var vals = element.val();
                                                if (vals && current_item) {
                                                    res = [];
                                                    cats = current_item.get("theme_names");
                                                    _.each(cats, function(item) {
                                                        res.push( {'id' : item.id, 'text' : item.name} );
                                                    });
                                                    callback(res);
                                                }
                                            },
                                            formatSelection : function(obj, container) {
                                                return obj.text;
                                            },
                                            formatNoMatches : function(term) {
                                                return '<%= t "no-matches-found" %> <a href="/" onclick="ThemeApp.Mgmt.createNewTheme(\'' + term + '\', set_theme, \'item-theme\');"><%= t "create-theme" %> <b>' + term + '</b></a>'
                                            },
                                            ajax : {
                                                url : "<%= baseUri %>/theme_names",
                                                data : function(term, page) {
                                                    return { 'search' : term };
                                                },
                                                results : function(_data, page, query) {
                                                    res = [];
                                                    _.each(_data.rows, function(item) {
                                                        res.push( {'id' : item.id, 'text' : item.name} );
                                                    });
                                                    var data = {
                                                        results: res
                                                    };
                                                    return data;
                                                }
                                            }
                                        }
                                    },
            short_title : { type : 'Text', title : '<%= t "short-title" %>' },
            precis : { type : 'Html', title : '<%= t "item-description" %>', editorAttrs: { rows : 2, cols : 60 } },
            short_precis : { type : 'Html', title : '<%= t "short-item-description" %>', editorAttrs: { rows : 2, cols : 60 } },
            is_break    : { type : 'Checkbox', title : '<%= t "item-is-break" %>' },
            room_id : { type : 'Select', title : '<%= t "item-room" %>', options : <%= [[' ',' ']].concat(Room.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %>,
                editorClass : 'item-form-element',
                validators: [
                    function check_for_time(value, formValues) {
                        var parent_err = {
                            type: "room_id",
                            message: '<%= t "child-item-can-not-be-assigned-to-room" %>'
                        };
                        if (formValues.room_id != "" && formValues.parent_id != "") {
                            $(this.$el).parent().parent().find('#room-error').html(parent_err.message);
                            return parent_err;
                        };
                        var err = {
                            type: "room_id",
                            message: '<%= t "time-required-when-you-set-a-room" %>'
                        };
                        if (formValues.room_id != "" && formValues.start_time == "" && !formValues.is_break) {
                            return err;
                        };
                    }
                ]
             },
            start_time : { type : 'Datetime', title : '<%= t "item-start-time" %>',
                editorClass : 'item-form-element',
                tz_offset : <%= Time.zone.parse(@start_date.start_date.to_s).utc_offset/60 %>,
                defaultDate: "<%= Time.zone.parse((@start_date.start_date +  + 8.hours).to_s).strftime('%m/%d/%Y %H:%M:%S') %>",
                // dependsOn : 'parent_id', dependentValues : ['false'],
                picker : {
                    locale : "<%= I18n.locale %>",
                    stepping : 5,
                    format : "DD MMM YYYY, HH:mm",
                    useCurrent: false,
                    minDate : "<%= Time.zone.parse(@start_date.start_date.to_s).strftime('%m/%d/%Y') %>",
                    maxDate : "<%= (Time.zone.parse(@start_date.start_date.to_s) + ((@start_date.number_of_days).to_i).days - 1.seconds).strftime('%m/%d/%Y %H:%M:%S') %>"
                },
                validators: [
                    function check_for_room(value, formValues) {
                        // var parent_err = {
                        //     type: "start_time",
                        //     message: '<%= t "child-item-can-not-be-assigned-to-time" %>'
                        // };
                        // if (formValues.start_time != "" && formValues.parent_id != "") {
                        //     $(this.$el).parent().parent().find('#start-time-error').text(parent_err.message);
                        //     return parent_err;
                        // };
                        var err = {
                            type: "start_time",
                            message: '<%= t "room-required-when-you-set-a-time" %>'
                        };
                        if (formValues.room_id == "" && formValues.start_time != "" && !formValues.is_break) {
                            return err;
                        };
                    },
                ],
                callback: function(val, editor, obj) {
                    if (val) {
                        obj.picker.data("DateTimePicker").clear();
                        obj.form.fields['room_id'].setValue("");
                    }
                },
                changeFn : function(e) {
                    console.log("start time changed");
                    console.log(this);
                    console.log(e);
                }
            },
            end_time : { type : 'Datetime', title : '<%= t "item-end-time" %>',
                editorClass : 'item-form-element',
                tz_offset : <%= Time.zone.parse(@start_date.start_date.to_s).utc_offset/60 %>,
                defaultDate: "<%= Time.zone.parse((@start_date.start_date +  + 8.hours).to_s).strftime('%m/%d/%Y %H:%M:%S') %>",
                // dependsOn : 'parent_id', dependentValues : ['false'],
                picker : {
                    locale : "<%= I18n.locale %>",
                    stepping : 5,
                    format : "DD MMM YYYY, HH:mm",
                    useCurrent: false,
                    minDate : "<%= Time.zone.parse(@start_date.start_date.to_s).strftime('%m/%d/%Y') %>",
                    maxDate : "<%= (Time.zone.parse(@start_date.start_date.to_s) + ((@start_date.number_of_days).to_i).days - 1.seconds).strftime('%m/%d/%Y %H:%M:%S') %>"
                },
                validators: [
                    function check_for_room(value, formValues) {
                        // var parent_err = {
                        //     type: "start_time",
                        //     message: '<%= t "child-item-can-not-be-assigned-to-time" %>'
                        // };
                        // if (formValues.start_time != "" && formValues.parent_id != "") {
                        //     $(this.$el).parent().parent().find('#start-time-error').text(parent_err.message);
                        //     return parent_err;
                        // };
                        var err = {
                            type: "start_time",
                            message: '<%= t "room-required-when-you-set-a-time" %>'
                        };
                        if (formValues.room_id == "" && formValues.start_time != "" && !formValues.is_break) {
                            return err;
                        };
                    },
                ],
                callback: function(val, editor, obj) {
                    if (val) {
                        obj.picker.data("DateTimePicker").clear();
                        obj.form.fields['room_id'].setValue("");
                    }
                },
                changeFn : function(e) {
                    // console.log("end time changed");
                    // console.log(this);
                    // console.log(e);
                    fields = this.form.fields;
                    endTime = this.picker.data("DateTimePicker").date();
                    startTime = fields.start_time.editor.picker.data("DateTimePicker").date();

                    diff = moment.duration(endTime.diff(startTime)).asMinutes();

                    fields.duration.editor.$el.val(diff);
                    // console.log(diff);
                }
            },
            <%-
            # TODO - start_offset, need to constrain based on the startime and duration of the parent
            # start_offser >= start of parent and <= duration of parent - duration of item
            # if parent is assigned we then need to get those details etc...
            %>
            start_offset : {
                        type : 'DependentNumber',
                        title : '<%= t "item-start-offset" %>',
                        help: '<%= t "item-start-offset-help" %>',
                        dependsOn : 'parent_id', dependentValues : ['not_null'],
                        validators: [
                            function check_within_parent(value, formValues) {
                                
                            }
                        ]
            },
            parent_id : {
                        type : 'DependentSelect2', 
                        dependsOn : 'is_break', dependentValues : ['false'],
                        title : '<%= t "parent-item" %>',
                        help: '<%= t "parent-item-help" %>',
                        config : {
                            multiple: false,
                            initSelection : function(element,callback) {
                                if (current_item) {
                                    var pitem = current_item.get('parent_val');
                                    if (pitem) {
                                        callback(
                                            {
                                                'id' : pitem.get('id'), 
                                                'text' : (pitem.get('title') + pitem.get('date_time_str')),
                                                start_time : pitem.get('start_time'),
                                                end_time : pitem.get('end_time'),
                                                start_time_str : pitem.get("start_time_str"),
                                                end_time_str : pitem.get("end_time_str,")
                                            }
                                        );
                                    }
                                }
                            },
                            formatSelection : function(obj, container) {
                                return obj.text;
                            },
                            ajax : {
                                url : "<%= baseUri %>/programme_items/list/no_breaks", // get the list of programme items - using a search term ....
                                data : function(term, page) {
                                    return { 'search' : term };
                                },
                                results : function(_data, page, query) {
                                    res = [{'id' : null, 'text' : "(<%= t 'planner.core.messages.no-parent' %>)" }];
                                    _.each(_data.rows, function(item) {
                                        res.push( 
                                            {
                                                'id' : item.id, 
                                                'text' : (item.title + item.date_time_str),
                                                start_time : item.start_time,
                                                end_time : item.end_time,
                                                start_time_str : item.start_time_str,
                                                end_time_str : item.end_time_str,
                                            } 
                                        );
                                    });
                                    var data = {
                                        results: res
                                    };
                                    return data;
                                }
                            }
                        },
                        changeFn : function(e) {
                            // console.log(this);
                            parent = this.$el.select2("data");

                            if (parent && parent.id != null) {
                                // console.log(parent);
                                form = this.form
                                $form = this.form.$el;
                                // Clear room and setup fields
                                $room = $form.find("[name='room_id']");
                                $room.val(null);
                                $form.find("[name='setup_type_id']").val(null);
                                $room.parents(".form-group").hide();

                                // Set times to parent time
                                if (parent.start_time && parent.start_time && parent.end_time) {
                                    form.fields.start_time.editor.picker.data("DateTimePicker").date(moment(parent.start_time_str));
                                    form.fields.end_time.editor.picker.data("DateTimePicker").date(moment(parent.end_time_str));
                                };

                            } else if (parent && parent.id == null){
                                this.form.$el.find("[name='room_id']").parents(".form-group").show();
                            };
                        }
            },
            item_notes : { type : 'DependentTextArea', 
                            dependsOn : 'is_break', dependentValues : ['false'], 
                            title : '<%= t "item-notes" %>', editorClass : 'item-form-element notes-text-area note-small', editorAttrs: { rows : 2, cols : 60 } },
            participant_notes : { type : 'DependentTextArea', editorClass : 'item-form-element notes-text-area note-small',
                        dependsOn : 'is_break', dependentValues : ['false'],
                        title : '<%= t "item-notes-for-participants" %>', editorAttrs: { rows : 2, cols : 60 } },
            format_id : { type : 'Select',
                        editorClass : 'item-form-element',
                        title : '<%= t "item-format" %>', options : <%= [[' ',' ']].concat(Format.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %> },
            setup_type_id : { type : 'Select', editorClass : 'item-form-element',
                        title : '<%= t "item-setup" %>', options : <%= [[' ',' ']].concat(SetupType.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %> },
            print : { type : 'Checkbox', title : '<%= t "item-print" %>',  editorClass : 'item-form-element', editorAttrs : {tabindex : "-1"} },
            duration : { type : 'Number', title : '<%= t "item-duration" %>', editorClass : 'item-form-element', validators: ['required'] },
            minimum_people : { type : 'DependentNumber', editorClass : 'item-form-element',
                                dependsOn : 'is_break', dependentValues : ['false'],
                                editorAttrs : { placeholder : '<%= t "min" %>' },
                                title : '<%= t "item-min-participants" %>', validators: [
                                { type: 'regexp', message: '<%= t "planner.core.errors.must-be-a-positive-number" %>', regexp: /^[0-9]\d*$/ }
                            ] },
            maximum_people : { type : 'DependentNumber', editorClass : 'item-form-element',
                                dependsOn : 'is_break', dependentValues : ['false'],
                                editorAttrs : { placeholder : '<%= t "max" %>' },
                                title : '<%= t "item-max-participants" %>', validators: [
                                { type: 'regexp', message: '<%= t "planner.core.errors.must-be-a-positive-number" %>', regexp: /^[0-9]\d*$/ }
                            ] },
            audience_size  : { type : 'DependentNumber', editorClass : 'item-form-element',
                                dependsOn : 'is_break', dependentValues : ['false'],
                                title : '<%= t "item-estimated-audience-size" %>' },
            pub_reference_number : { type : 'DependentText', editorClass : 'item-form-element',
                                    dependsOn : 'is_break', dependentValues : ['false'],
                                    title : '<%= t "item-publication-reference" %>' },
            mobile_card_size    : { type : 'Select',  editorClass : 'item-form-element', editorAttrs : {tabindex : "-1"}, title : '<%= t "mobile-card-size" %>', 
                                options : [{ val: 1, label: '<%= (t "small-feminin") %>' },{ val: 5, label: '<%= (t "medium-feminin") %>' },{ val: 10, label: '<%= (t "large-feminin") %>' }] }
        },
        // Default values used when creating a new instance
        defaults: {
            "duration":  60,
            "minimum_people": 1,
            "maximum_people": 5,
            "print": true,
            "mobile_card_size" : 1,
            "is_break"  : false,
            "audience_size" : 0,
        },
        urlRoot : "<%= baseUri + '/programme_items' %>",
        relations : [{
            type           : Backbone.HasMany,
            key            : 'external_images',
            relatedModel   : 'Picture',
            collectionType : 'PictureCollection'
        }, {
            type           : Backbone.HasOne,
            key            : 'parent_val',
            relatedModel   : 'ParentItem'
        }]
    });
    
    ParentItem = Backbone.RelationalModel.extend({});
    
    //
    TagContext = Backbone.Model.extend({
    });
    TagContextCollection = Backbone.Collection.extend({
        model : TagContext
    });
    TagFilter = Backbone.Model.extend({
        // Context name & Tag name
        // no ids cause no sync with backend (how to avoid dups? - TODO)
    });
    TagFilterCollection = Backbone.Collection.extend({
        model : TagFilter
    });
    
    ThemeName = Backbone.Model.extend({});
    Themes = Backbone.Collection.extend({
        model : ThemeName,
        urlRoot : "<%= baseUri + '/theme_names' %>"
    });
    
    ThemeView = Marionette.ItemView.extend({});


    ItemImageView = Marionette.ItemView.extend({
        template : '#item-images-template',
        events : {
            "click .large-image-create-button"  : "create_large_image",
            "click .large-image-edit-button"    : "edit_large_image",
            "click .large-image-delete-button"  : "delete_large_image",
            "click .medium-image-create-button" : "create_medium_image",
            "click .medium-image-edit-button"   : "edit_medium_image",
            "click .medium-image-delete-button" : "delete_medium_image"
        },

        initialize : function() {
            this.listenTo(this.model, 'change', this.render);
            eventAggregator.on("refreshImagesList", this.render, this);

        },
        
        onBeforeClose : function() {
            eventAggregator.off("refreshImagesList", this.render);
        },

        create_large_image : function(event) {
            this.create_image("largecard","Create Large Image");
        },
        edit_large_image : function(event) {
            this.edit_image("largecard","Edit Large Image");
        },
        delete_large_image : function(event) {
            this.delete_image("largecard");
        },
        create_medium_image : function(event) {
            this.create_image("mediumcard","Create Medium Image");
        },
        edit_medium_image : function(event) {
            this.edit_image("mediumcard","Edit Medium Image");
        },
        delete_medium_image : function(event) {
            this.delete_image("mediumcard");
        },
        
        // TOOD - aspect ratio for model depending on use
        create_image : function(cardtype, title) {
            var model = this.model;
            var pic = new Picture({
                use: cardtype
            });
            var item_id = model.id;
            pic.url = "<%= baseUri + '/external_images/ProgrammeItem/' %>" + item_id + '/' + cardtype
            mdl = new AppUtils.ModelModal({
                        model : pic,
                        title : title,
                        modal_template : "#image-uploader-form-template",
                        refresh : function(mdl) {
                            model.fetch({async : false});
                        }
                    });
            mdl.render();
        },
        
        edit_image : function(cardtype, title) {
            var item_id = this.model.id;
            var model = this.model;
            var img = _.find(this.model.get('external_images').models, function(im) { return im.get('use') == cardtype });
            img.url = "<%= baseUri + '/external_images/ProgrammeItem/' %>" + item_id + '/' + cardtype
            mdl = new AppUtils.ModelModal({
                        model : img,
                        title : title,
                        modal_template : "#image-uploader-form-template",
                        refresh : function(mdl) {
                            // Need to refresh the model
                            model.fetch({
                                async : false,
                                success : function() {
                                    eventAggregator.trigger("refreshImagesList");
                                }
                            });
                        }
                    });
            mdl.render();
        },
        
        delete_image : function(cardtype) {
            var item_id = this.model.id;
            var model = this.model;
            var that = this;

            modal = new AppUtils.ConfirmModel({
                title : '<%= I18n.t "delete-confirmation" %> ',
                content : '<%= (I18n.t "confirm-that-you-really-want-to-delete").html_safe %>',
                continueAction : function() {
                    var img = _.find(model.get('external_images').models, function(im) { return im.get('use') == cardtype });
                    img.destroy({
                        url : "<%= baseUri + '/external_images/' %>" + img.id
                    });
                    that.render();
                },
                closeAction : function() {
                }
            });
            modal.render();
        }
    });

    /*
     * 
     */
    ItemTabLayout = Backbone.Marionette.Layout.extend({
        template : "#item-tab-layout-template",
        
        regions : {
            program_item    : "#program-item-tab",
            participants    : "#item-participants-tab",
            tags            : "#tags-tab",
            images          : "#item-images-tab"
        }
    });
    
    /*
     * 
     */
    var filters = null;
    var itemTabLayout = null;
    
    function syncModel() {
        this.fetch({async : false});
    };
    
    function clearDetails() {
        $('#selected-program-item').text("");
        
        if (itemTabLayout) {
            itemTabLayout.program_item.close();
            itemTabLayout.participants.close();
            itemTabLayout.tags.close();
            itemTabLayout.images.close();
        };

        Backbone.Relational.store.reset();

        eventAggregator.off("refreshTagList", syncModel);
        
        current_item = null;
    };
    
    function showDetails(id) {
        var data = jQuery("#items").jqGrid('getRowData', id);
        $('#selected-program-item').html(data['item[title]']);

        var itemMdl = new ProgramItem;

        itemMdl.deferred = itemMdl.fetch({
            url : "<%= baseUri + '/programme_items/' %>" + id + '.json',
            async: true,
        }).done(function() {
                TabUtils.createTabContent({
                    model : itemMdl,
                    template : '#program-participants-view-template',
                    region : itemTabLayout.participants,
                    id : id,
                    id_name : 'programme_item_id',
                    editTitle : "Edit Item",
                    updateCallback : function(mdl, response, opts) {
                                    // 1. we need to refresh the row in the table (or the current table)
                                    // and make sure that the row is selected
                                    // Also need to update the title above the tabs
                                    $("#items").jqGrid('setGridParam', {
                                        loadComplete: function(data) {
                                            // alert("dd");
                                            $("#items").jqGrid('setSelection', id, false); // when load is complete the selection is called...
                                            // load complete is called every time... only want it once, so remove it after it has been used...
                                            $(this).jqGrid('setGridParam', { loadComplete: function() {} });
                                        }
                                    });
                                    $("#items").trigger("reloadGrid");
                                },
                    events : {
                        'click .add-people-button' : function() {
                            model = itemMdl;
                            modal = new AppUtils.PanelModal({
                                title : "<%= escape_javascript(t 'add-people') %>",
                                url   : "<%= baseUri + '/panels/item_mgmt?prog_item=' %>" + itemMdl.id,
                                title : '<%= t "add-people" %>',
                                closeCheck : function() {
                                    var res = document.getElementById('modal-iframe').contentWindow.ItemApp.PeopleManagement.needsSaved();
                                    return res;
                                },
                                closeAction : function() {
                                    itemMdl.fetch();
                                }
                            });
                            modal.render();
                        }
                    }
                });
                
                mdl = TabUtils.createTabContent({
                    model : itemMdl,
                    url : "<%= baseUri + '/programme_items/' %>" + id + '.json',
                    template : '#program-item-summary-view-template',
                    region : itemTabLayout.program_item,
                    id : id,
                    id_name : 'programme_item_id',
                });
                
                itemTabLayout.images.show(new ItemImageView({model : itemMdl}) );
                
                TabUtils.createTagListContent({
                    collectionType : TagContextCollection,
                    url : "<%= baseUri + '/tags/' %>" + id + "?class=ProgrammeItem",
                    tagUrl : "<%= baseUri + '/tags/' %>"+ id + "/add?class=ProgrammeItem",
                    template : "#tag-context-layout-template",
                    view_refresh_event : "tags:refresh",
                    region : itemTabLayout.tags,
                    addTitle : '<%= t "create-tag" %>',
                });
        
                //initialize the popovers
                $(function () {
                    $('.bpopover').popover({
                        html: true,
                        viewport: { selector: 'body', padding: 0 },
                        container: 'body',
                    })
                });
                
                eventAggregator.on("refreshTagList", syncModel, itemMdl);
        
                selectCallbacks.fire({
                    id : id,
                    model : itemMdl
                });

            current_item = itemMdl;
        });

        return itemMdl;
    };

    // item-filters == id
    // TODO - add filter for items
    function create_theme_selector() {
        
        $('#theme-filters').select2({
            multiple: true,
            formatSelection : function(obj, container) {
                return obj.text;
            },
            ajax : {
                url : "<%= baseUri %>/theme_names",
                data : function(term, page) {
                    return { 'search' : term };
                },
                results : function(_data, page, query) {
                    res = [];
                    _.each(_data.rows, function(item) {
                        res.push( {'id' : item.id, 'text' : item.name} );
                    });
                    var data = {
                        results: res
                    };
                    return data;
                }
            }
        }).on("change", function(e) {
            filterThemes = e.val;
            ItemApp.ItemManagement.refreshTable();
        });      
    };
    
    var filterCol = null;
    var filterThemes = null;

    return {
        
        ProgramItem : ProgramItem,
        
        addSelectCallback : function(func) {
            selectCallbacks.add(func);
        },
        
        showDetails : function(id) {
            clearDetails();
            return showDetails(id);
        },
        clearDetails : function() {
            clearDetails();
        },

        addFilter : function(context, name) {
            if (!filters) {
                filters = new TagFilterCollection();
            }
            
            if (!filterCol) {
                filterCol = TabUtils.createTabListContent({
                    collection : filters,
                    template : "#item-filters-template",
                    place : "#item-filters",
                    tagremove : function(context, name) { // force a refresh of the table etc
                        ItemApp.ItemManagement.refreshTable();
                    },
                    view_attributes : { "style" : "display : inline" }, // TODO - move the style to the style-sheet
                });
            }
            
            filters.add(
                new TagFilter({
                    context : context,
                    name : name
                })
            );
        },
                
        getTagQuery : function() {
            var tagQuery = "";
            
            // go through the filters are create the query for the tags ...
            if (filters) {
                // convert the filters into an associative array and then build the query...
                var filterArray = {}
                _.each(filters, function(el, index, list) {
                    var ctx = filters.at(index).get('context');
                    if (!filterArray[ctx]) {
                        filterArray[ctx] = filters.at(index).get('name');
                    } else {
                        filterArray[ctx] += ',' + filters.at(index).get('name');                    
                    };
                });
                var str = "";
                var index = 0;
                _.each(filterArray, function(val, key, list) {
                    if (index > 0) {
                        str += "&";
                    };
                    str += "context[" + index + "]=" + key + "&tags[" + index + "]=" + encodeURIComponent(val);
                    index += 1;
                });
                tagQuery = str;
            }
            
            if (filterThemes && filterThemes.length > 0) {
                var str = "";
                if (tagQuery.length > 0) {
                    str += "&"
                }
                str += "theme_ids=" + encodeURIComponent(filterThemes);
                tagQuery += str;
            }
            
            return tagQuery;
        },
        
        refreshTable : function() {
            // get the tags etc from the view and create the query
            var tagQuery = ItemApp.ItemManagement.getTagQuery();
            jQuery("#items").itemTable('tagQuery',{ 
                tagQuery : tagQuery
            });
        },
        
        init : function() {
            // The layout manager for the tabs
            itemTabLayout = new ItemTabLayout();
            itemTabLayout.render();
            $('#item-tabs').html(itemTabLayout.el);
            
            create_theme_selector();
            
            TabUtils.createTagCloudContent({
                collectionType : TagContextCollection,
                url : "<%= baseUri + '/tags?class=ProgrammeItem' %>",
                template : "#tag-cloud-context-layout-template",
                place : '#item-tag-cloud',
                collection_attributes : { "class" : "accordion", "id" : "item-tag-cloud-parent" },
                view_attributes : { "class" : "accordion-group" },
                tagselect : function(context, name) {
                    ItemApp.ItemManagement.addFilter(context, name);
                    ItemApp.ItemManagement.refreshTable();
                },
            });

            $('#programme-item-tabs').tabdrop({
                text : "..."
            });

        }
    };
    
})(Backbone);

jQuery(document).ready(function() {
    moment.locale("<%= I18n.locale %>");
    ItemApp.addInitializer(ItemApp.ItemManagement.init);
    ItemApp.start();
});

</script>

<% @extra_javascript.each do |extra| %>
    <%= render extra %>
<% end %>
