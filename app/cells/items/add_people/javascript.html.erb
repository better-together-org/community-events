<script type="text/javascript">
ItemApp = new Backbone.Marionette.Application();

ItemApp.PeopleManagement = (function(Backbone){
    var eventAggregator = AppUtils.eventAggregator;
    var current_url = null;
    var dropped = false;
    
    function get_pub_name(person) {
        var res = "";
        
        if (person.pub_first_name || person.pub_last_name) {
            res = person.pub_prefix
            if (res.length > 0 && person.pub_first_name.length > 0) {
                res += " "
            }
            res += person.pub_first_name
            if (res.length > 0 && person.pub_last_name.length > 0) {
                res += " "
            }
            res += person.pub_last_name
            if (res.length > 0 && person.pub_suffix.length > 0) {
                res += " "
            }
            res += person.pub_suffix
        } else {
            res = person.prefix
            if (res.length > 0 && person.first_name.length > 0) {
                res += " "
            }
            res += person.first_name
            if (res.length > 0 && person.last_name.length > 0) {
                res += " "
            }
            res += person.last_name
            if (res.length > 0 && person.last_name.length > 0) {
                res += " "
            }
            res += person.suffix
        }
        
        return res;
    };

    /*
     * Models
     */
    ProgramItem = Backbone.Model.extend({
        urlRoot : "<%= baseUri + '/programme_items' %>"
    });
    
    ItemAssignment = Backbone.Model.extend({});

    ItemAssignments = Backbone.Collection.extend({
        model : ItemAssignment,
    });
    
    /*
     * Views
     */
    PeopleControlView = Marionette.ItemView.extend({
        template : '#people-control-view-template',
        
        events : {
            "click .add-people-button" : "addPeople"
        },
        
        addPeople : function(ev) {
            // do nowt if there is no current program item
            if (currentItem) {
                // get the selected people from the grid
                var selectedIds = jQuery('#participants').jqGrid('getGridParam','selarrrow');
                // currentItem - add the names and id to the participants
                
                // get the data from the rows
                _.each(selectedIds, function(id) {
                    // make sure that it is unique i.e. not already in the list
                    var found = participants.find(function(item){
                                        return item.get('person_id') === parseInt(id);
                                    });

                    if (!found) {
                        var p = jQuery('#participants').participantTable('getPerson',id);
                        
                        var assignment = new ItemAssignment({
                            role_id: <%= PersonItemRole['Participant'].id %>,
                            role_name: "<%= PersonItemRole['Participant'].name %>",
                            programme_item_id: parseInt(currentItem.id),
                            person_id: parseInt(p.id),
                            person_name: get_pub_name(p)
                        });
                        var new_posn = participants.size() + 1;
                        assignment.set('sort_order_position', new_posn);
                    
                        participants.add(assignment);

                        needsSaved = true;
                    }
                });
            
                // unselect them and re-render the view
                jQuery('#participants').jqGrid('resetSelection');
                eventAggregator.trigger("refreshViews");
            }
        }
    });
    
    ProgramItemView = Marionette.ItemView.extend({
        template : '#program-item-view-template',

        initialize : function() {
            eventAggregator.on("refreshViews", this.render, this);
        }
    });
    
    ParticipantView = Marionette.ItemView.extend({
        template : '#participant-template',
        events : {
            "click .remove-person"   : "removePerson",
        },
        
        removePerson : function() {
            src = this.model.get('role_name');
            src_col = get_collection(src);
            src_col.remove(this.model);
            needsSaved = true;
        }
    });

    ParticipantsView = Marionette.CollectionView.extend({
        itemView: ParticipantView,
        itemViewOptions : {
            className: 'ui-draggable sortable thumbnail clearfix'
        },

        initialize : function() {
            eventAggregator.on("refreshViews", this.render, this);
        },
        
        make_sortable : function() {
            $(".ui-droppable").sortable({
                items: '.sortable',
                cursor: 'move',
                axis: 'y',
                stop : function(e, ui) {
                    if (dropped) {
                        dropped = false;
                    }
                    eventAggregator.trigger("refreshViews");
                },
                update : function(e, ui) {
                    if (!dropped) {
                        var new_posn = ui.item.index();
                        var person_id = ui.item.find(".assignment-details").attr("id");
                        var src = ui.item.find(".assignment-details").attr("src");
                        var col = get_collection(src);
                        var assignment = col.find(function(item){
                                            return item.get('person_id') == parseInt(person_id);
                                        });
                        
                        col.remove(assignment);
                        col.add(assignment, {at: new_posn});
                        assignment.set('sort_order_position', new_posn);

                        var posn = 0
                        col.each(function(mdl) {
                            if (mdl.get('sort_order_position') != null) {
                                mdl.set('sort_order_position', posn);
                            }
                            posn += 1;
                        });

                        needsSaved = true;
                    }
                }
            });
        },

        onRender : function() {
            this.make_sortable();
        }
    });

    /*
     * Other stuff
     */
    var currentItem = null;
    var needsSaved = false;
    var moderators = null;
    var participants = null;
    var other_participants = null;
    var reserved = null;
    var invisible = null;
    
    function get_collection(src) {
        var coll = null;
        switch(src) {
            case "OtherParticipant":
                coll = other_participants;
                break;
            case "Participant":
                coll = participants;
                break;
            case "Moderator":
                coll = moderators;
                break;
            case "Reserved":
                coll = reserved;
                break;
            case "Invisible":
                coll = invisible;
                break;
        };
        return coll;
    };
    
    function showProgrammeItem(id) {
        // check if a save is needed
        if (needsSaved) {
            mdl = new LeavePageModal({
                title : '<%= t "unsaved-data" %>',
                continueAction : function() {
                    loadProgItem(id);
                }
            });
            mdl.render();
        } else {
            loadProgItem(id);
        }
    };
    
    function loadProgItem(id) {
        showSpinner('#program-item-view');
        currentItem = new ProgramItem();
        currentItem.fetch({
            url : "<%= baseUri + '/programme_items/' %>" + id + '.json',
            success : function(model) {
                needsSaved = false;
                
                ItemApp.getRegion("item").show(new ProgramItemView({model : model}));

                $('#program-item-view').find('.bpopover').popover({
                    html: true,
                    viewport: { selector: 'body', padding: 0 },
                    container: 'body',
                });
            }
        });
        
        current_url = "<%= baseUri + '/programme_item_assignments/' %>" + id;
        
        showSpinner('#moderators-view');
        moderators = new ItemAssignments();
        moderators.url = "<%= baseUri + '/programme_item_assignments/' %>" + id + '/' + <%= PersonItemRole['Moderator'].id %>;
        moderators.fetch({
            url: "<%= baseUri + '/programme_item_assignments/' %>" + id + '/' + <%= PersonItemRole['Moderator'].id %>,
            success : function(coll) {
                ItemApp.getRegion("moderators").show(new ParticipantsView({collection : coll}));
            }
        });

        showSpinner('#participants-view');
        participants = new ItemAssignments();
        participants.url = "<%= baseUri + '/programme_item_assignments/' %>" + id + '/' + <%= PersonItemRole['Participant'].id %>;
        participants.fetch({
            url: "<%= baseUri + '/programme_item_assignments/' %>" + id + '/' + <%= PersonItemRole['Participant'].id %>,
            success : function(coll) {
                ItemApp.getRegion("participants").show(new ParticipantsView({collection : coll}));
            }
        });

        showSpinner('#other-participants-view');
        other_participants = new ItemAssignments();
        other_participants.url = "<%= baseUri + '/programme_item_assignments/' %>" + id + '/' + <%= PersonItemRole['OtherParticipant'].id %>;
        other_participants.fetch({
            url: "<%= baseUri + '/programme_item_assignments/' %>" + id + '/' + <%= PersonItemRole['OtherParticipant'].id %>,
            success : function(coll) {
                ItemApp.getRegion("other_participants").show(new ParticipantsView({collection : coll}));
            }
        });

        showSpinner('#reserveds-view');
        reserved = new ItemAssignments();
        reserved.url = "<%= baseUri + '/programme_item_assignments/' %>" + id + '/' + <%= PersonItemRole['Reserved'].id %>;
        reserved.fetch({
            url: "<%= baseUri + '/programme_item_assignments/' %>" + id + '/' + <%= PersonItemRole['Reserved'].id %>,
            success : function(coll) {
                ItemApp.getRegion("reserveds").show(new ParticipantsView({collection : coll}));
            }
        });

        showSpinner('#invisibles-view');
        invisible = new ItemAssignments();
        invisible.url = "<%= baseUri + '/programme_item_assignments/' %>" + id + '/' + <%= PersonItemRole['Invisible'].id %>;
        invisible.fetch({
            url: "<%= baseUri + '/programme_item_assignments/' %>" + id + '/' + <%= PersonItemRole['Invisible'].id %>,
            success : function(coll) {
                ItemApp.getRegion("invisibles").show(new ParticipantsView({collection : coll}));
            }
        });
    };
    
    function clear_and_refresh(collection, callback) {
        var mdl = null;
        while (mdl = collection.pop({silent: true})) {
            mdl.clear({silent: true})
        };
        collection.fetch({silent: true,
            success : function() {
                if (callback) {
                    callback();
                }
            }
        });
    };
    
    function save_collection(collection, callback) {
        if (current_url) {
            var programme_item_assignments = {
                programme_item_assignments: collection
            }
    
            $.ajax({
                method: 'PUT',
                contentType: 'application/json',
                url: current_url,
                dataType: 'JSON',
                data: JSON.stringify(programme_item_assignments),
                success : function() {
                    // Force a reload of the models etc....
                    clear_and_refresh(moderators,
                        function() {
                        clear_and_refresh(participants,
                            function() {
                            clear_and_refresh(reserved,
                                function() {
                                    clear_and_refresh(invisible,
                                        function() {
                                            clear_and_refresh(other_participants, 
                                                function() {
                                                    if (callback) {
                                                        callback();
                                                    }
                                                }
                                            )
                                        }
                                    )
                                }
                            )
                            }
                        )
                        }
                    );
                }
            });
        }
    };

    function create_people_fiter() {
        $('#toggle-people').change(function(ev) {
            var val = $(this).val();
            jQuery("#participants").participantTable('filterPeople', !$(ev.target).prop("checked"));
        });
    }

    
    return {
        needsSaved : function() {
            return needsSaved;
        },
        confirmExit : function () {
            if (needsSaved) {
                return "Changes to the Program Item have not been saved. Are you sure you wich to leave the page?";
            }
        },
        showProgrammeItem : function(id) {
            showProgrammeItem(id);

        },
        showPerson : function(id) {
            // May not need since we can get the selected from the grid???
        },
        
        init : function() {
            $('#toggle-people').bootstrapToggle({
                  on:  '<%= t "yes" %>',
                  off: '<%= t "no" %>'
                });

            // Add the regions to this app
            ItemApp.addRegions({
                people_ctl      : "#people-control-view",
                item            : "#program-item-view",
                moderators      : "#moderators-view",
                participants    : "#participants-view",
                other_participants    : "#other-participants-view",
                reserveds       : "#reserveds-view",
                invisibles      : "#invisibles-view",
            });
            
            $('#participants-area').find(".ui-droppable").droppable({
                drop: function(event, ui) {
                    var person_id = $(ui.draggable).find(".assignment-details").attr('id'); // get the id of the person from the dragged object
                    var source = $(ui.draggable).find(".assignment-details").attr('src'); // get the source area

                    if ((this.id.indexOf(source.toLowerCase()) == -1) || (this.id.indexOf(source.toLowerCase()) > 1)) {
                        dropped = true;

                        var src = get_collection(source);
                        if (src) {
                            var assignment = src.find(function(item){
                                                return item.get('person_id') == parseInt(person_id);
                                            });
        
                            // force a refresh of the views
                            var dest = null;
                            switch(this.id) {
                                case "other-participant-area":
                                    dest = other_participants;
                                    dest_role = "OtherParticipant";
                                    dest_role_id = <%= PersonItemRole['OtherParticipant'].id %>;
                                    break;
                                case "participant-area":
                                    dest = participants;
                                    dest_role = "Participant";
                                    dest_role_id = <%= PersonItemRole['Participant'].id %>;
                                    break;
                                case "moderator-area":
                                    dest = moderators;
                                    dest_role = "Moderator";
                                    dest_role_id = <%= PersonItemRole['Moderator'].id %>;
                                    break;
                                case "reserve-area":
                                    dest = reserved;
                                    dest_role = "Reserved";
                                    dest_role_id = <%= PersonItemRole['Reserved'].id %>;
                                    break;
                                case "invisible-area":
                                    dest = invisible;
                                    dest_role = "Invisible";
                                    dest_role_id = <%= PersonItemRole['Invisible'].id %>;
                                    break;
                            };
    
                            src.remove(assignment);
                            assignment.set('role_id',dest_role_id);
                            assignment.set('role_name',dest_role);
                            dest.add(assignment);
                            needsSaved = true;
                            
                            eventAggregator.trigger("refreshViews");
                        }
                    }
                }
            });

            $("#item-assignment-mgmt").find(".save-button").click(function() {
                var all_people = [];
                all_people = all_people.concat(moderators.models);
                all_people = all_people.concat(participants.models);
                all_people = all_people.concat(other_participants.models);
                all_people = all_people.concat(reserved.models);
                all_people = all_people.concat(invisible.models);
                
                save_collection(all_people, function() {
                    needsSaved = false;
                    eventAggregator.trigger("refreshViews");
                    AppUtils.setMessage({
                      text : I18n.t('core.messages.data-successfully-saved'),
                      style : 'success',
                      renderLocation : 'main-layout',
                      fade : true
                    });
                });
            });

            // Add the control for adding people to items            
            ItemApp.getRegion("people_ctl").show(new PeopleControlView());
            
            create_people_fiter();
        }
    }

})(Backbone);

jQuery(document).ready(function() {
    ItemApp.start();
    ItemApp.PeopleManagement.init();
    var prog_item = "<%= @prog_item %>";
    if (prog_item) {
        ItemApp.PeopleManagement.showProgrammeItem(prog_item);
    } else {
        window.onbeforeunload = ItemApp.PeopleManagement.confirmExit;
    }
});

</script>
