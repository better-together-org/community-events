<script type="text/javascript">
ItemApp = new Backbone.Marionette.Application();

ItemApp.PeopleManagement = (function(Backbone){
    var eventAggregator = AppUtils.eventAggregator;
    
    /*
     * Models
     */
    ProgramItem = Backbone.Model.extend({
        urlRoot : "<%= baseUri + '/programme_items' %>"
    });
    
    /*
     * Views
     */
    PeopleControlView = Marionette.ItemView.extend({
        template : '#people-control-view-template',
        
        events : {
            "click .add-people-button" : "addPeople"
        },
        
        addPeople : function(ev) {
            // do nowt if there is no current program item
            if (currentItem) {
                // get the selected people from the grid
                var selectedIds = jQuery('#participants').jqGrid('getGridParam','selarrrow');
                // currentItem - add the names and id to the participants
                var participants = currentItem.get('participants');
                
                // get the data from the rows
                _.each(selectedIds, function(id) {
                    var p = jQuery('#participants').participantTable('getPerson',id);
                    
                    // make sure that it is unique i.e. not already in the list
                    var found = _.find(participants, function(a) {
                        return (a.id == id);
                    });
                    
                    if (!found) {
                        participants.push(p); 
                    }
                });
            
                // unselect them and re-render the view
                jQuery('#participants').jqGrid('resetSelection');
                eventAggregator.trigger("refreshViews");
                
                needsSaved = true;
            }
        }
    });
    
    ProgramItemPeopleView = Marionette.ItemView.extend({
        template : '#program-item-view-template',
        
        initialize : function() {
            eventAggregator.on("refreshViews", this.render, this);
        },
        
        onRender : function() {
            var thisView = this;
            this.$el.find( ".ui-draggable" ).draggable({
                axis: "y", // constrain vertical
                revert: true // return to origin if not dropped on droppable area
            });
            this.$el.find(".ui-droppable").droppable({
                drop: function(event, ui) {
                    thisView.render();
                }
            });
        },

        events : {
            "drop #moderator-area"   : "addModerator",
            "drop #participant-area" : "addParticipant",
            "drop #reserve-area"     : "addReserve",
            "drop #invisible-area"   : "addInvisible",
            "click .remove-person"   : "removePerson",
            "click .save-button"     : "saveItem"
        },
        
        saveItem : function(event) {
            // Update the program item - but we just want to save the people...
            var id = this.model.id;
            this.model.save(null, {
                url : "<%= baseUri + '/programme_items/' %>" + id + "/updateParticipants",
                success : function() {
                    // message that the save happened
                    infoMessage("Program item assignment has been saved.");
                    needsSaved = false;
                }
            });
        },
        
        removePerson : function(event) { 
            // alert("remove person");
            var personId = $(event.currentTarget).attr('person');
            var source = $(event.currentTarget).attr('src');
            
            var c = this.model.get(source);
            var p = _.find(c, function(a) {
                return (a.id == personId);
            });
            var idx = _.indexOf(c, p);
            var el = c.splice(idx,1);

            needsSaved = true;            
            this.render();
        },
        
        addModerator : function(event, src) {
            this.movePerson(src, 'moderators');
        },
        
        addParticipant : function(event, src) {
            this.movePerson(src, 'participants');
        },
        
        addReserve : function(event, src) {
            this.movePerson(src, 'reserves');
        },
        
        addInvisible : function(event, src) {
            this.movePerson(src, 'invisibles');
        },
        
        movePerson : function(src, dest) {
            var personId = $(src.draggable).attr('id'); // get the id of the person from the dragged object
            var source = $(src.draggable).attr('src'); // get the source area
            
            var p = _.find(this.model.get(source), function(a) {
                return (a.id == personId);
            });
            var idx = _.indexOf(this.model.get(source), p);
            // remove from the source
            var c = this.model.get(source);
            var el = c.splice(idx,1);
            
            // add to the destination
            c = this.model.get(dest);
            c.push(p); 
        }

    });

    /*
     * Other stuff
     */
    var tabContent = []; // TODO
    var currentItem = null;
    var needsSaved = false;
    
    function showProgrammeItem(id) {
        
        // check if a save is needed
        if (needsSaved) {
            mdl = new LeavePageModal({
                title : '<%= t "unsaved-data" %>',
                continueAction : function() {
                    loadProgItem(id);
                }
            });
            mdl.render();
        } else {
            loadProgItem(id);
        }
    };
    
    function loadProgItem(id) {
            showSpinner('#program-item-view');
            currentItem = new ProgramItem();
            currentItem.fetch({
                url : "<%= baseUri + '/programme_items/' %>" + id + '.json',
                async:false,
                success : function(model) {
	                needsSaved = false;
                    ItemApp.getRegion("people").show(new ProgramItemPeopleView({model : model}));
                }
            });        
    };
    
    return {
        needsSaved : function() {
            return needsSaved;
        },
        confirmExit : function () {
            if (needsSaved) {
                return "Changes to the Program Item have not been saved. Are you sure you wich to leave the page?";
            }
        },
        showProgrammeItem : function(id) {
            showProgrammeItem(id);

        },
        showPerson : function(id) {
            // May not need since we can get the selected from the grid???
        },
        
        init : function() {
            // Add the regions to this app
            ItemApp.addRegions({
                people_ctl : "#people-control-view",
                people     : "#program-item-view",
            });

            // Add the control for adding people to items            
            ItemApp.getRegion("people_ctl").show(new PeopleControlView());
        }
    }

})(Backbone);

jQuery(document).ready(function() {
    ItemApp.start();
    ItemApp.PeopleManagement.init();
    var prog_item = "<%= @prog_item %>";
    if (prog_item) {
        ItemApp.PeopleManagement.showProgrammeItem(prog_item);
    } else {
        window.onbeforeunload = ItemApp.PeopleManagement.confirmExit;
    }
});

</script>
