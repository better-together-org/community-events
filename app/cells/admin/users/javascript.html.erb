<script type="text/javascript">

UserMgmtApp = new Backbone.Marionette.Application();

UserMgmtApp.UserManagement = (function(Backbone){
    
    Backbone.Form.editors.List.Modal.ModalAdapter = Backbone.BootstrapModal;
    var roles = <%= [].concat(Role.all.to_a.collect {|p| {'val' => p.id, 'label' => p.title}}).to_json.html_safe %>;

    UserMdl =  Backbone.DeepModel.extend({
        schema : {
            login   : { type : 'Text', title : '<%= t "user-login" %>', 
                        validators: ['required', {
                                        type: 'regexp',
                                        regexp: /^[A-Za-z0-9\.@\-_\+]+$/,
                                        message: '<%= t "login-name-conditions" %>'
                        }]
                      },
            email   : { type : 'Text', title : '<%= t "email" %>', 
                        validators: ['required', 'email'] 
                      },
            password : { type : 'Password', title : '<%= t "user-password" %>',
                         validators: [
                            { type: 'match', field: 'password_confirmation', message: '<%= t "passwords-must-match" %>'},
                            function checkLength(value, formValues) {
                                var err = {
                                  type: 'password',
                                  message: '<%= t "passwords-too-short" %>'
                                };
                        
                                if ((value.length < 8) && (value.length >= 1)) return err;
                            }
                         ]
                       },
            password_confirmation : { type : 'Password', title : '<%= t "user-password-again" %>'},
            roles : { type : 'List',
                        title : '<%= t "roles" %>',
                        itemToString : function(item) {
                                            var r = _.find(roles, function(v) { return v.val == item.id;});
                                            return r.label;
                                        },
                        itemType : 'Object',
                        subSchema : {
                            id : { 
                                    title : '<%= t "user-role" %>',
                                    type : 'Select',
                                    options : roles 
                            }
                        }
                    }

        },
        
        validate: function(attrs, options) {
            var err = {};
            err.roles = '<%= t "at-least-one-user-role-needed" %>';
            
            if (attrs.roles.length == 0) {
                return err;
            }
        },
        
        urlRoot : "<%= baseUri + '/users/admin' %>"
    });

    return {
        
        showDetails : function(id) {
            mdl = new UserMdl();
            mdl.fetch({
                url : "<%= baseUri + '/users/admin/' %>" + id + '.json',
            });

            return mdl;            
        },
        
        clearDetails : function() {
            
        },
        
        UserMdl : UserMdl,
        
        init : function(options) {
            // new Workspace();
        }
    }
    
})(Backbone);

/*
 * 
 */
jQuery(document).ready(function() {
    UserMgmtApp.addInitializer(UserMgmtApp.UserManagement.init);
    UserMgmtApp.start({});
});

</script>
